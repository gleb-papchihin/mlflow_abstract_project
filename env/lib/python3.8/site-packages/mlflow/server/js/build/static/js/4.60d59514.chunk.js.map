{"version":3,"sources":["../node_modules/@formatjs/cli/node_modules/tslib/tslib.es6.js","../node_modules/@formatjs/cli/node_modules/@formatjs/icu-messageformat-parser/lib/error.js","../node_modules/@formatjs/cli/node_modules/@formatjs/icu-messageformat-parser/lib/types.js","../node_modules/@formatjs/cli/node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js","../node_modules/@formatjs/cli/node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js","../node_modules/@formatjs/cli/node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js","../node_modules/@formatjs/cli/node_modules/@formatjs/icu-skeleton-parser/lib/number.js","../node_modules/@formatjs/cli/node_modules/@formatjs/icu-messageformat-parser/lib/parser.js","../node_modules/@formatjs/cli/node_modules/@formatjs/icu-messageformat-parser/lib/index.js","../node_modules/@formatjs/cli/src/pseudo_locale.js"],"names":["__webpack_require__","r","__webpack_exports__","d","__extends","_assign","__rest","__decorate","__param","__metadata","__awaiter","__generator","__createBinding","__exportStar","__values","__read","__spread","__spreadArrays","__spreadArray","__await","__asyncGenerator","__asyncDelegator","__asyncValues","__makeTemplateObject","__importStar","__importDefault","__classPrivateFieldGet","__classPrivateFieldSet","_extendStatics","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","this","constructor","create","assign","t","s","i","n","arguments","length","apply","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","decorators","target","key","desc","c","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","paramIndex","decorator","metadataKey","metadataValue","metadata","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","rejected","result","done","then","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","pop","push","o","m","k","k2","undefined","enumerable","get","ar","error","concat","il","a","j","jl","to","from","asyncIterator","q","resume","fulfill","settle","shift","cooked","raw","__setModuleDefault","mod","__esModule","default","receiver","state","kind","has","set","ErrorKind","TYPE","SKELETON_TYPE","isLiteralElement","el","type","literal","isArgumentElement","argument","isNumberElement","number","isDateElement","date","isTimeElement","time","isSelectElement","select","isPluralElement","plural","isPoundElement","pound","isTagElement","tag","isNumberSkeleton","isDateTimeSkeleton","dateTime","createLiteralElement","createNumberElement","style","SPACE_SEPARATOR_REGEX","DATE_TIME_REGEX","parseDateTimeSkeleton","skeleton","replace","match","len","era","year","RangeError","month","day","weekday","hour12","hourCycle","hour","minute","second","timeZoneName","regex_generated_WHITE_SPACE_REGEX","parser_a","FRACTION_PRECISION_REGEX","SIGNIFICANT_PRECISION_REGEX","INTEGER_WIDTH_REGEX","CONCISE_INTEGER_WIDTH_REGEX","parseSignificantPrecision","str","g1","g2","minimumSignificantDigits","maximumSignificantDigits","parseSign","signDisplay","currencySign","parseConciseScientificAndEngineeringStem","stem","notation","slice","test","Error","minimumIntegerDigits","parseNotationOptions","opt","signOpts","parseNumberSkeleton","tokens","_i","tokens_1","token","scale","currency","options","useGrouping","maximumFractionDigits","unit","compactDisplay","tslib_es6","reduce","all","currencyDisplay","unitDisplay","parseFloat","g3","g4","g5","minimumFractionDigits","conciseScientificAndEngineeringOpts","SPACE_SEPARATOR_START_REGEX","RegExp","source","SPACE_SEPARATOR_END_REGEX","createLocation","start","end","hasNativeStartsWith","startsWith","hasNativeFromCodePoint","fromCodePoint","hasNativeFromEntries","fromEntries","hasNativeCodePointAt","codePointAt","hasTrimStart","trimStart","hasTrimEnd","trimEnd","isSafeInteger","Number","isFinite","Math","floor","abs","REGEX_SUPPORTS_U_AND_Y","RE","exec","matchIdentifierAtIndex","search","position","codePoints","code","elements","fromCharCode","entries","obj","entries_1","_a","index","size","first","charCodeAt","flag","IDENTIFIER_PREFIX_RE_1","lastIndex","_isWhiteSpace","_isPatternSyntax","parser_Parser","Parser","message","offset","line","column","ignoreTag","requiresOtherClause","shouldParseSkeletons","parse","parseMessage","nestingLevel","parentArgType","expectingCloseTag","isEOF","char","parseArgument","err","val","peek","UNMATCHED_CLOSING_TAG","clonePosition","_isAlpha","parseTag","parseLiteral","bump","location","startPosition","tagName","parseTagName","bumpSpace","bumpIf","childrenResult","children","endTagStartPosition","INVALID_TAG","closingTagNameStartPosition","UNCLOSED_TAG","startOffset","parseQuoteResult","tryParseQuote","parseUnquotedResult","tryParseUnquoted","parseLeftAngleResult","tryParseLeftAngleBracket","codepoint","ch","openingBracePosition","EXPECT_ARGUMENT_CLOSING_BRACE","EMPTY_ARGUMENT","parseIdentifierIfPossible","MALFORMED_ARGUMENT","parseArgumentOptions","startingPosition","endOffset","bumpTo","typeStartPosition","argType","typeEndPosition","EXPECT_ARGUMENT_TYPE","styleAndLocation","styleStartPosition","parseSimpleArgStyleIfPossible","EXPECT_ARGUMENT_STYLE","styleLocation","argCloseResult","tryParseArgumentClose","location_1","parseNumberSkeletonFromString","EXPECT_DATE_TIME_SKELETON","pattern","parsedOptions","typeEndPosition_1","EXPECT_SELECT_ARGUMENT_OPTIONS","identifierAndLocation","pluralOffset","EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE","tryParseDecimalInteger","INVALID_PLURAL_ARGUMENT_OFFSET_VALUE","optionsResult","tryParsePluralOrSelectOptions","location_2","pluralType","INVALID_ARGUMENT_TYPE","nestedBraces","apostrophePosition","bumpUntil","UNCLOSED_QUOTE_IN_ARGUMENT_STYLE","stringTokens_1","split","filter","x","stemAndOptions","options_1","INVALID_NUMBER_SKELETON","expectCloseTag","parsedFirstIdentifier","hasOtherClause","parsedSelectors","Set","selector","selectorLocation","EXPECT_PLURAL_ARGUMENT_SELECTOR","INVALID_PLURAL_ARGUMENT_SELECTOR","DUPLICATE_SELECT_ARGUMENT_SELECTOR","DUPLICATE_PLURAL_ARGUMENT_SELECTOR","EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT","EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT","fragmentResult","add","EXPECT_SELECT_ARGUMENT_SELECTOR","MISSING_OTHER_CLAUSE","expectNumberError","invalidNumberError","sign","hasDigits","decimal","prefix","currentOffset","targetOffset","min","nextCode","opts","SyntaxError","originalMessage","captureLocation","pruneLocation","els","forEach","exports","generateENXB","generateENXA","generateXXHA","generateXXAC","generateXXLS","tslib_1","icu_messageformat_parser_1","msg","ast","lastChunk","toUpperCase","values","firstChunk","ASCII","ACCENTED_ASCII","map","join","pseudoString","repeat"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAAAL,EAAAG,EAAAD,EAAA,2BAAAI,IAAAN,EAAAG,EAAAD,EAAA,+BAAAK,IAAAP,EAAAG,EAAAD,EAAA,4BAAAM,IAAAR,EAAAG,EAAAD,EAAA,+BAAAO,IAAAT,EAAAG,EAAAD,EAAA,8BAAAQ,IAAAV,EAAAG,EAAAD,EAAA,gCAAAS,IAAAX,EAAAG,EAAAD,EAAA,oCAAAU,IAAAZ,EAAAG,EAAAD,EAAA,iCAAAW,IAAAb,EAAAG,EAAAD,EAAA,6BAAAY,IAAAd,EAAAG,EAAAD,EAAA,2BAAAa,IAAAf,EAAAG,EAAAD,EAAA,6BAAAc,IAAAhB,EAAAG,EAAAD,EAAA,mCAAAe,IAAAjB,EAAAG,EAAAD,EAAA,kCAAAgB,IAAAlB,EAAAG,EAAAD,EAAA,4BAAAiB,IAAAnB,EAAAG,EAAAD,EAAA,qCAAAkB,IAAApB,EAAAG,EAAAD,EAAA,qCAAAmB,IAAArB,EAAAG,EAAAD,EAAA,kCAAAoB,IAAAtB,EAAAG,EAAAD,EAAA,yCAAAqB,IAAAvB,EAAAG,EAAAD,EAAA,iCAAAsB,IAAAxB,EAAAG,EAAAD,EAAA,oCAAAuB,IAAAzB,EAAAG,EAAAD,EAAA,2CAAAwB,IAAA1B,EAAAG,EAAAD,EAAA,2CAAAyB,IAgBA,IAAAC,EAAA,SAAAzB,EAAA0B,GAWA,OAVAD,EAAAE,OAAAC,gBAAA,CACAC,UAAA,cACGC,OAAA,SAAA9B,EAAA0B,GACH1B,EAAA6B,UAAAH,IACG,SAAA1B,EAAA0B,GACH,QAAAK,KAAAL,EACAC,OAAAK,UAAAC,eAAAC,KAAAR,EAAAK,KAAA/B,EAAA+B,GAAAL,EAAAK,MAIA/B,EAAA0B,IAGO,SAAAzB,EAAAD,EAAA0B,GACP,uBAAAA,GAAA,OAAAA,EAAA,UAAAS,UAAA,uBAAAC,OAAAV,GAAA,iCAIA,SAAAW,IACAC,KAAAC,YAAAvC,EAHAyB,EAAAzB,EAAA0B,GAMA1B,EAAAgC,UAAA,OAAAN,EAAAC,OAAAa,OAAAd,IAAAW,EAAAL,UAAAN,EAAAM,UAAA,IAAAK,GAGA,IAAAnC,EAAA,WAaA,OAZAA,EAAAyB,OAAAc,QAAA,SAAAC,GACA,QAAAC,EAAAC,EAAA,EAAAC,EAAAC,UAAAC,OAA4CH,EAAAC,EAAOD,IAGnD,QAAAb,KAFAY,EAAAG,UAAAF,GAGAjB,OAAAK,UAAAC,eAAAC,KAAAS,EAAAZ,KAAAW,EAAAX,GAAAY,EAAAZ,IAIA,OAAAW,IAGAM,MAAAV,KAAAQ,YAIO,SAAA3C,EAAAwC,EAAAM,GACP,IAAAP,EAAA,GAEA,QAAAX,KAAAY,EACAhB,OAAAK,UAAAC,eAAAC,KAAAS,EAAAZ,IAAAkB,EAAAC,QAAAnB,GAAA,IAAAW,EAAAX,GAAAY,EAAAZ,IAGA,SAAAY,GAAA,oBAAAhB,OAAAwB,sBAAA,KAAAP,EAAA,MAAAb,EAAAJ,OAAAwB,sBAAAR,GAA2HC,EAAAb,EAAAgB,OAAcH,IACzIK,EAAAC,QAAAnB,EAAAa,IAAA,GAAAjB,OAAAK,UAAAoB,qBAAAlB,KAAAS,EAAAZ,EAAAa,MAAAF,EAAAX,EAAAa,IAAAD,EAAAZ,EAAAa,KAEA,OAAAF,EAEO,SAAAtC,EAAAiD,EAAAC,EAAAC,EAAAC,GACP,IAEAxD,EAFAyD,EAAAX,UAAAC,OACAjD,EAAA2D,EAAA,EAAAH,EAAA,OAAAE,IAAA7B,OAAA+B,yBAAAJ,EAAAC,GAAAC,EAEA,qBAAAG,SAAA,oBAAAA,QAAAC,SAAA9D,EAAA6D,QAAAC,SAAAP,EAAAC,EAAAC,EAAAC,QAAiI,QAAAZ,EAAAS,EAAAN,OAAA,EAAwCH,GAAA,EAAQA,KACjL5C,EAAAqD,EAAAT,MAAA9C,GAAA2D,EAAA,EAAAzD,EAAAF,GAAA2D,EAAA,EAAAzD,EAAAsD,EAAAC,EAAAzD,GAAAE,EAAAsD,EAAAC,KAAAzD,GAEA,OAAA2D,EAAA,GAAA3D,GAAA6B,OAAAkC,eAAAP,EAAAC,EAAAzD,KAEO,SAAAO,EAAAyD,EAAAC,GACP,gBAAAT,EAAAC,GACAQ,EAAAT,EAAAC,EAAAO,IAGO,SAAAxD,EAAA0D,EAAAC,GACP,qBAAAN,SAAA,oBAAAA,QAAAO,SAAA,OAAAP,QAAAO,SAAAF,EAAAC,GAEO,SAAA1D,EAAA4D,EAAAC,EAAAC,EAAAC,GAOP,WAAAD,MAAAE,UAAA,SAAAC,EAAAC,GACA,SAAAC,EAAAC,GACA,IACAC,EAAAN,EAAAO,KAAAF,IACO,MAAA1B,GACPwB,EAAAxB,IAIA,SAAA6B,EAAAH,GACA,IACAC,EAAAN,EAAA,MAAAK,IACO,MAAA1B,GACPwB,EAAAxB,IAIA,SAAA2B,EAAAG,GAvBA,IAAAJ,EAwBAI,EAAAC,KAAAR,EAAAO,EAAAJ,QAxBAA,EAwBAI,EAAAJ,MAvBAA,aAAAN,EAAAM,EAAA,IAAAN,EAAA,SAAAG,GACAA,EAAAG,MAsBAM,KAAAP,EAAAI,GAGAF,GAAAN,IAAAtB,MAAAmB,EAAAC,GAAA,KAAAS,UAGO,SAAArE,EAAA2D,EAAAe,GACP,IASAC,EACAC,EACA1C,EACA2C,EAZAC,EAAA,CACAC,MAAA,EACAC,KAAA,WACA,KAAA9C,EAAA,SAAAA,EAAA,GACA,OAAAA,EAAA,IAEA+C,KAAA,GACAC,IAAA,IAMA,OAAAL,EAAA,CACAR,KAAAc,EAAA,GACAC,MAAAD,EAAA,GACAE,OAAAF,EAAA,IACG,oBAAAG,SAAAT,EAAAS,OAAAC,UAAA,WACH,OAAAzD,OACG+C,EAEH,SAAAM,EAAA9C,GACA,gBAAAmD,GACA,OAIA,SAAAC,GACA,GAAAd,EAAA,UAAAhD,UAAA,mCAEA,KAAAmD,GACA,IACA,GAAAH,EAAA,EAAAC,IAAA1C,EAAA,EAAAuD,EAAA,GAAAb,EAAA,OAAAa,EAAA,GAAAb,EAAA,SAAA1C,EAAA0C,EAAA,SAAA1C,EAAAR,KAAAkD,GAAA,GAAAA,EAAAP,SAAAnC,IAAAR,KAAAkD,EAAAa,EAAA,KAAAjB,KAAA,OAAAtC,EAGA,OAFA0C,EAAA,EAAA1C,IAAAuD,EAAA,GAAAA,EAAA,GAAAvD,EAAAiC,QAEAsB,EAAA,IACA,OACA,OACAvD,EAAAuD,EACA,MAEA,OAEA,OADAX,EAAAC,QACA,CACAZ,MAAAsB,EAAA,GACAjB,MAAA,GAGA,OACAM,EAAAC,QACAH,EAAAa,EAAA,GACAA,EAAA,IACA,SAEA,OACAA,EAAAX,EAAAI,IAAAQ,MAEAZ,EAAAG,KAAAS,MAEA,SAEA,QACA,KAAAxD,KAAA4C,EAAAG,MAAA1C,OAAA,GAAAL,IAAAK,OAAA,UAAAkD,EAAA,QAAAA,EAAA,KACAX,EAAA,EACA,SAGA,OAAAW,EAAA,MAAAvD,GAAAuD,EAAA,GAAAvD,EAAA,IAAAuD,EAAA,GAAAvD,EAAA,KACA4C,EAAAC,MAAAU,EAAA,GACA,MAGA,OAAAA,EAAA,IAAAX,EAAAC,MAAA7C,EAAA,IACA4C,EAAAC,MAAA7C,EAAA,GACAA,EAAAuD,EACA,MAGA,GAAAvD,GAAA4C,EAAAC,MAAA7C,EAAA,IACA4C,EAAAC,MAAA7C,EAAA,GAEA4C,EAAAI,IAAAS,KAAAF,GAEA,MAGAvD,EAAA,IAAA4C,EAAAI,IAAAQ,MAEAZ,EAAAG,KAAAS,MAEA,SAGAD,EAAAf,EAAAhD,KAAAiC,EAAAmB,GACO,MAAArC,GACPgD,EAAA,GAAAhD,GACAmC,EAAA,EACO,QACPD,EAAAzC,EAAA,EAIA,KAAAuD,EAAA,SAAAA,EAAA,GACA,OACAtB,MAAAsB,EAAA,GAAAA,EAAA,UACAjB,MAAA,GAlFAJ,CAAA,CAAA/B,EAAAmD,MAsFO,IAAAvF,EAAAkB,OAAAa,OAAA,SAAA4D,EAAAC,EAAAC,EAAAC,QACPC,IAAAD,MAAAD,GACA3E,OAAAkC,eAAAuC,EAAAG,EAAA,CACAE,YAAA,EACAC,IAAA,WACA,OAAAL,EAAAC,OAGC,SAAAF,EAAAC,EAAAC,EAAAC,QACDC,IAAAD,MAAAD,GACAF,EAAAG,GAAAF,EAAAC,IAEO,SAAA5F,EAAA2F,EAAAD,GACP,QAAArE,KAAAsE,EACA,YAAAtE,GAAAJ,OAAAK,UAAAC,eAAAC,KAAAkE,EAAArE,IAAAtB,EAAA2F,EAAAC,EAAAtE,GAGO,SAAApB,EAAAyF,GACP,IAAAzD,EAAA,oBAAAmD,eAAAC,SACAM,EAAA1D,GAAAyD,EAAAzD,GACAC,EAAA,EACA,GAAAyD,EAAA,OAAAA,EAAAnE,KAAAkE,GACA,GAAAA,GAAA,kBAAAA,EAAArD,OAAA,OACA8B,KAAA,WAEA,OADAuB,GAAAxD,GAAAwD,EAAArD,SAAAqD,OAAA,GACA,CACAzB,MAAAyB,KAAAxD,KACAoC,MAAAoB,KAIA,UAAAjE,UAAAQ,EAAA,6DAEO,SAAA/B,EAAAwF,EAAAvD,GACP,IAAAwD,EAAA,oBAAAP,QAAAM,EAAAN,OAAAC,UACA,IAAAM,EAAA,OAAAD,EACA,IACAtG,EAEAmD,EAHAL,EAAAyD,EAAAnE,KAAAkE,GAEAO,EAAA,GAGA,IACA,eAAA9D,QAAA,MAAA/C,EAAA8C,EAAAiC,QAAAG,MACA2B,EAAAR,KAAArG,EAAA6E,OAEG,MAAAiC,GACH3D,EAAA,CACA2D,SAEG,QACH,IACA9G,MAAAkF,OAAAqB,EAAAzD,EAAA,SAAAyD,EAAAnE,KAAAU,GACK,QACL,GAAAK,EAAA,MAAAA,EAAA2D,OAIA,OAAAD,EAIO,SAAA9F,IACP,QAAA8F,EAAA,GAAA/D,EAAA,EAA0BA,EAAAE,UAAAC,OAAsBH,IAChD+D,IAAAE,OAAAjG,EAAAkC,UAAAF,KAGA,OAAA+D,EAIO,SAAA7F,IACP,QAAA6B,EAAA,EAAAC,EAAA,EAAAkE,EAAAhE,UAAAC,OAA+CH,EAAAkE,EAAQlE,IACvDD,GAAAG,UAAAF,GAAAG,OAGA,IAAAjD,EAAAgC,MAAAa,GAAA2D,EAAA,MAAA1D,EAAA,EAAsCA,EAAAkE,EAAQlE,IAC9C,QAAAmE,EAAAjE,UAAAF,GAAAoE,EAAA,EAAAC,EAAAF,EAAAhE,OAAoDiE,EAAAC,EAAQD,IAAAV,IAC5DxG,EAAAwG,GAAAS,EAAAC,GAIA,OAAAlH,EAEO,SAAAiB,EAAAmG,EAAAC,GACP,QAAAvE,EAAA,EAAAkE,EAAAK,EAAApE,OAAAiE,EAAAE,EAAAnE,OAAkDH,EAAAkE,EAAQlE,IAAAoE,IAC1DE,EAAAF,GAAAG,EAAAvE,GAGA,OAAAsE,EAEO,SAAAlG,EAAAgF,GACP,OAAA1D,gBAAAtB,GAAAsB,KAAA0D,IAAA1D,MAAA,IAAAtB,EAAAgF,GAEO,SAAA/E,EAAAkD,EAAAC,EAAAE,GACP,IAAAwB,OAAAsB,cAAA,UAAAjF,UAAA,wCACA,IACAS,EADAyC,EAAAf,EAAAtB,MAAAmB,EAAAC,GAAA,IAEAiD,EAAA,GACA,OAAAzE,EAAA,GAAe+C,EAAA,QAAAA,EAAA,SAAAA,EAAA,UAAA/C,EAAAkD,OAAAsB,eAAA,WACf,OAAA9E,MACGM,EAEH,SAAA+C,EAAA9C,GACAwC,EAAAxC,KAAAD,EAAAC,GAAA,SAAAmD,GACA,WAAAzB,QAAA,SAAAwC,EAAArF,GACA2F,EAAAlB,KAAA,CAAAtD,EAAAmD,EAAAe,EAAArF,IAAA,GAAA4F,EAAAzE,EAAAmD,OAKA,SAAAsB,EAAAzE,EAAAmD,GACA,KAOAlG,EANAuF,EAAAxC,GAAAmD,IAOArB,iBAAA3D,EAAAuD,QAAAC,QAAA1E,EAAA6E,MAAAqB,GAAAf,KAAAsC,EAAA9C,GAAA+C,EAAAH,EAAA,MAAAvH,GANK,MAAAmD,GACLuE,EAAAH,EAAA,MAAApE,GAIA,IAAAnD,EAIA,SAAAyH,EAAA5C,GACA2C,EAAA,OAAA3C,GAGA,SAAAF,EAAAE,GACA2C,EAAA,QAAA3C,GAGA,SAAA6C,EAAArC,EAAAa,GACAb,EAAAa,GAAAqB,EAAAI,QAAAJ,EAAAtE,QAAAuE,EAAAD,EAAA,MAAAA,EAAA,QAGO,SAAAnG,EAAAkF,GACP,IAAAxD,EAAAb,EACA,OAAAa,EAAA,GAAe+C,EAAA,QAAAA,EAAA,iBAAA1C,GACf,MAAAA,IACG0C,EAAA,UAAA/C,EAAAkD,OAAAC,UAAA,WACH,OAAAzD,MACGM,EAEH,SAAA+C,EAAA9C,EAAAsC,GACAvC,EAAAC,GAAAuD,EAAAvD,GAAA,SAAAmD,GACA,OAAAjE,MAAA,CACA4C,MAAA3D,EAAAoF,EAAAvD,GAAAmD,IACAhB,KAAA,WAAAnC,GACOsC,IAAAa,MACFb,GAGE,SAAAhE,EAAAiF,GACP,IAAAN,OAAAsB,cAAA,UAAAjF,UAAA,wCACA,IACAS,EADAyD,EAAAD,EAAAN,OAAAsB,eAEA,OAAAf,IAAAnE,KAAAkE,MAAAzF,EAAAyF,GAAAxD,EAAA,GAAyG+C,EAAA,QAAAA,EAAA,SAAAA,EAAA,UAAA/C,EAAAkD,OAAAsB,eAAA,WACzG,OAAA9E,MACGM,GAEH,SAAA+C,EAAA9C,GACAD,EAAAC,GAAAuD,EAAAvD,IAAA,SAAAmD,GACA,WAAAzB,QAAA,SAAAC,EAAAC,IAMA,SAAAD,EAAAC,EAAAzE,EAAAgG,GACAzB,QAAAC,QAAAwB,GAAAf,KAAA,SAAAe,GACAxB,EAAA,CACAG,MAAAqB,EACAhB,KAAAhF,KAEKyE,IAXL+C,CAAAhD,EAAAC,GAAAuB,EAAAI,EAAAvD,GAAAmD,IAAAhB,KAAAgB,EAAArB,WAcO,SAAAvD,EAAAsG,EAAAC,GASP,OARAhG,OAAAkC,eACAlC,OAAAkC,eAAA6D,EAAA,OACA/C,MAAAgD,IAGAD,EAAAC,MAGAD,EAIA,IAAAE,EAAAjG,OAAAa,OAAA,SAAA4D,EAAAJ,GACArE,OAAAkC,eAAAuC,EAAA,WACAK,YAAA,EACA9B,MAAAqB,KAEC,SAAAI,EAAAJ,GACDI,EAAA,QAAAJ,GAGO,SAAA3E,EAAAwG,GACP,GAAAA,KAAAC,WAAA,OAAAD,EACA,IAAA9C,EAAA,GACA,SAAA8C,EAAA,QAAAvB,KAAAuB,EACA,YAAAvB,GAAA3E,OAAAK,UAAAC,eAAAC,KAAA2F,EAAAvB,IAAA7F,EAAAsE,EAAA8C,EAAAvB,GAKA,OAFAsB,EAAA7C,EAAA8C,GAEA9C,EAEO,SAAAzD,EAAAuG,GACP,OAAAA,KAAAC,WAAAD,EAAA,CACAE,QAAAF,GAGO,SAAAtG,EAAAyG,EAAAC,EAAAC,EAAA/C,GACP,SAAA+C,IAAA/C,EAAA,UAAAhD,UAAA,iDACA,uBAAA8F,EAAAD,IAAAC,IAAA9C,GAAA8C,EAAAE,IAAAH,GAAA,UAAA7F,UAAA,4EACA,YAAA+F,EAAA/C,EAAA,MAAA+C,EAAA/C,EAAAjD,KAAA8F,GAAA7C,IAAAR,MAAAsD,EAAAvB,IAAAsB,GAEO,SAAAxG,EAAAwG,EAAAC,EAAAtD,EAAAuD,EAAA/C,GACP,SAAA+C,EAAA,UAAA/F,UAAA,kCACA,SAAA+F,IAAA/C,EAAA,UAAAhD,UAAA,iDACA,uBAAA8F,EAAAD,IAAAC,IAAA9C,GAAA8C,EAAAE,IAAAH,GAAA,UAAA7F,UAAA,2EACA,YAAA+F,EAAA/C,EAAAjD,KAAA8F,EAAArD,GAAAQ,IAAAR,QAAAsD,EAAAG,IAAAJ,EAAArD,oDCpcO0D,ECAAC,EAkDAC,YAWA,SAAAC,EAAAC,GACP,OAAAA,EAAAC,OAAAJ,EAAAK,QAEO,SAAAC,EAAAH,GACP,OAAAA,EAAAC,OAAAJ,EAAAO,SAEO,SAAAC,EAAAL,GACP,OAAAA,EAAAC,OAAAJ,EAAAS,OAEO,SAAAC,EAAAP,GACP,OAAAA,EAAAC,OAAAJ,EAAAW,KAEO,SAAAC,EAAAT,GACP,OAAAA,EAAAC,OAAAJ,EAAAa,KAEO,SAAAC,EAAAX,GACP,OAAAA,EAAAC,OAAAJ,EAAAe,OAEO,SAAAC,EAAAb,GACP,OAAAA,EAAAC,OAAAJ,EAAAiB,OAEO,SAAAC,EAAAf,GACP,OAAAA,EAAAC,OAAAJ,EAAAmB,MAEO,SAAAC,EAAAjB,GACP,OAAAA,EAAAC,OAAAJ,EAAAqB,IAEO,SAAAC,EAAAnB,GACP,SAAAA,GAAA,kBAAAA,KAAAC,OAAAH,EAAAQ,QAEO,SAAAc,EAAApB,GACP,SAAAA,GAAA,kBAAAA,KAAAC,OAAAH,EAAAuB,UAEO,SAAAC,EAAApF,GACP,OACA+D,KAAAJ,EAAAK,QACAhE,SAGO,SAAAqF,EAAArF,EAAAsF,GACP,OACAvB,KAAAJ,EAAAS,OACApE,QACAsF,UDtGA,SAAA5B,GAEAA,IAAA,iEAGAA,IAAA,mCAGAA,IAAA,2CAGAA,IAAA,+CAGAA,IAAA,iDAGAA,IAAA,iDAGAA,IAAA,qDAGAA,IAAA,2DAGAA,IAAA,mDAGAA,IAAA,0DAGAA,IAAA,wEAGAA,IAAA,oEAGAA,IAAA,8EAGAA,IAAA,gFAGAA,IAAA,sEAGAA,IAAA,sEAGAA,IAAA,wFAMAA,IAAA,wFAGAA,IAAA,wEAMAA,IAAA,4EAKAA,IAAA,4EAGAA,IAAA,gDAGAA,IAAA,8BAGAA,IAAA,wCAGAA,IAAA,kDAGAA,IAAA,gCArFA,CAsFCA,MAAA,KCtFD,SAAAC,GAIAA,IAAA,qBAKAA,IAAA,uBAKAA,IAAA,mBAKAA,IAAA,eAKAA,IAAA,eAKAA,IAAA,mBAKAA,IAAA,mBAMAA,IAAA,iBAKAA,IAAA,aA7CA,CA8CCA,MAAA,KAID,SAAAC,GACAA,IAAA,mBACAA,IAAA,uBAFA,CAGCA,MAAA,KCtDM,IAAA2B,EAAA,+CCIPC,EAAA,4KAQO,SAAAC,EAAAC,GACP,IAAAtF,EAAA,GA8IA,OA7IAsF,EAAAC,QAAAH,EAAA,SAAAI,GACA,IAAAC,EAAAD,EAAAxH,OAEA,OAAAwH,EAAA,IAEA,QACAxF,EAAA0F,IAAA,IAAAD,EAAA,WAAAA,EAAA,iBACA,MAGA,QACAzF,EAAA2F,KAAA,IAAAF,EAAA,oBACA,MAEA,QACA,QACA,QACA,QACA,UAAAG,WAAA,gEAGA,QACA,QACA,UAAAA,WAAA,8CAGA,QACA,QACA5F,EAAA6F,MAAA,8CAAAJ,EAAA,GACA,MAGA,QACA,QACA,UAAAG,WAAA,2CAEA,QACA5F,EAAA8F,IAAA,sBAAAL,EAAA,GACA,MAEA,QACA,QACA,QACA,UAAAG,WAAA,6DAGA,QACA5F,EAAA+F,QAAA,IAAAN,EAAA,YAAAA,EAAA,iBACA,MAEA,QACA,GAAAA,EAAA,EACA,UAAAG,WAAA,iDAGA5F,EAAA+F,QAAA,kCAAAN,EAAA,GACA,MAEA,QACA,GAAAA,EAAA,EACA,UAAAG,WAAA,iDAGA5F,EAAA+F,QAAA,kCAAAN,EAAA,GACA,MAGA,QAEAzF,EAAAgG,QAAA,EACA,MAEA,QAEA,QAEA,UAAAJ,WAAA,8DAGA,QACA5F,EAAAiG,UAAA,MACAjG,EAAAkG,KAAA,sBAAAT,EAAA,GACA,MAEA,QACAzF,EAAAiG,UAAA,MACAjG,EAAAkG,KAAA,sBAAAT,EAAA,GACA,MAEA,QACAzF,EAAAiG,UAAA,MACAjG,EAAAkG,KAAA,sBAAAT,EAAA,GACA,MAEA,QACAzF,EAAAiG,UAAA,MACAjG,EAAAkG,KAAA,sBAAAT,EAAA,GACA,MAEA,QACA,QACA,QACA,UAAAG,WAAA,oEAGA,QACA5F,EAAAmG,OAAA,sBAAAV,EAAA,GACA,MAGA,QACAzF,EAAAoG,OAAA,sBAAAX,EAAA,GACA,MAEA,QACA,QACA,UAAAG,WAAA,8DAGA,QAEA5F,EAAAqG,aAAAZ,EAAA,iBACA,MAEA,QAEA,QAEA,QAEA,QAEA,QAEA,QAEA,UAAAG,WAAA,wEAGA,WAEA5F,EC3JO,IAAIsG,EAAiB,wCC4C5B,IC7CIC,ED6CJC,EAAA,mCACAC,EAAA,mBACAC,EAAA,0BACAC,EAAA,SAEA,SAAAC,EAAAC,GACA,IAAA7G,EAAA,GAoBA,OAnBA6G,EAAAtB,QAAAkB,EAAA,SAAAlG,EAAAuG,EAAAC,GAiBA,MAfA,kBAAAA,GACA/G,EAAAgH,yBAAAF,EAAA9I,OACAgC,EAAAiH,yBAAAH,EAAA9I,QAEA,MAAA+I,EACA/G,EAAAgH,yBAAAF,EAAA9I,OAEA,MAAA8I,EAAA,GACA9G,EAAAiH,yBAAAH,EAAA9I,QAGAgC,EAAAgH,yBAAAF,EAAA9I,OACAgC,EAAAiH,yBAAAH,EAAA9I,QAAA,kBAAA+I,IAAA/I,OAAA,IAGA,KAEAgC,EAGA,SAAAkH,EAAAL,GACA,OAAAA,GACA,gBACA,OACAM,YAAA,QAGA,sBACA,SACA,OACAC,aAAA,cAGA,kBACA,SACA,OACAD,YAAA,UAGA,6BACA,UACA,OACAA,YAAA,SACAC,aAAA,cAGA,uBACA,SACA,OACAD,YAAA,cAGA,kCACA,UACA,OACAA,YAAA,aACAC,aAAA,cAGA,iBACA,SACA,OACAD,YAAA,UAKA,SAAAE,EAAAC,GAEA,IAAAtH,EAcA,GAZA,MAAAsH,EAAA,UAAAA,EAAA,IACAtH,EAAA,CACAuH,SAAA,eAEAD,IAAAE,MAAA,IACG,MAAAF,EAAA,KACHtH,EAAA,CACAuH,SAAA,cAEAD,IAAAE,MAAA,IAGAxH,EAAA,CACA,IAAAmH,EAAAG,EAAAE,MAAA,KAUA,GARA,OAAAL,GACAnH,EAAAmH,YAAA,SACAG,IAAAE,MAAA,IACK,OAAAL,IACLnH,EAAAmH,YAAA,aACAG,IAAAE,MAAA,KAGAb,EAAAc,KAAAH,GACA,UAAAI,MAAA,6CAGA1H,EAAA2H,qBAAAL,EAAAtJ,OAGA,OAAAgC,EAGA,SAAA4H,EAAAC,GACA,IACAC,EAAAZ,EAAAW,GAEA,OAAAC,GAHA,GAcO,SAAAC,EAAAC,GAGP,IAFA,IAAAhI,EAAA,GAEAiI,EAAA,EAAAC,EAAAF,EAAqCC,EAAAC,EAAAlK,OAAsBiK,IAAA,CAC3D,IAAAE,EAAAD,EAAAD,GAEA,OAAAE,EAAAb,MACA,cACA,QACAtH,EAAAkF,MAAA,UACA,SAEA,YACAlF,EAAAkF,MAAA,UACAlF,EAAAoI,MAAA,IACA,SAEA,eACApI,EAAAkF,MAAA,WACAlF,EAAAqI,SAAAF,EAAAG,QAAA,GACA,SAEA,gBACA,SACAtI,EAAAuI,aAAA,EACA,SAEA,wBACA,QACAvI,EAAAwI,sBAAA,EACA,SAEA,mBACA,WACAxI,EAAAkF,MAAA,OACAlF,EAAAyI,KAAAN,EAAAG,QAAA,GAtKA/C,QAAA,cAuKA,SAEA,oBACA,QACAvF,EAAAuH,SAAA,UACAvH,EAAA0I,eAAA,QACA,SAEA,mBACA,SACA1I,EAAAuH,SAAA,UACAvH,EAAA0I,eAAA,OACA,SAEA,iBACA1I,EAAiBpD,OAAA+L,EAAA,SAAA/L,CAASA,OAAA+L,EAAA,SAAA/L,CAASA,OAAA+L,EAAA,SAAA/L,CAAQ,GAAGoD,GAAA,CAC9CuH,SAAA,eACSY,EAAAG,QAAAM,OAAA,SAAAC,EAAAhB,GACT,OAAiBjL,OAAA+L,EAAA,SAAA/L,CAASA,OAAA+L,EAAA,SAAA/L,CAAQ,GAAGiM,GAAAjB,EAAAC,KAC5B,KACT,SAEA,kBACA7H,EAAiBpD,OAAA+L,EAAA,SAAA/L,CAASA,OAAA+L,EAAA,SAAA/L,CAASA,OAAA+L,EAAA,SAAA/L,CAAQ,GAAGoD,GAAA,CAC9CuH,SAAA,gBACSY,EAAAG,QAAAM,OAAA,SAAAC,EAAAhB,GACT,OAAiBjL,OAAA+L,EAAA,SAAA/L,CAASA,OAAA+L,EAAA,SAAA/L,CAAQ,GAAGiM,GAAAjB,EAAAC,KAC5B,KACT,SAEA,sBACA7H,EAAAuH,SAAA,WACA,SAGA,wBACAvH,EAAA8I,gBAAA,eACA9I,EAAA+I,YAAA,SACA,SAEA,uBACA/I,EAAA8I,gBAAA,OACA9I,EAAA+I,YAAA,QACA,SAEA,2BACA/I,EAAA8I,gBAAA,OACA9I,EAAA+I,YAAA,OACA,SAEA,0BACA/I,EAAA8I,gBAAA,SACA,SAEA,YACA9I,EAAAoI,MAAAY,WAAAb,EAAAG,QAAA,IACA,SAGA,oBACA,GAAAH,EAAAG,QAAAtK,OAAA,EACA,UAAA4H,WAAA,4DAGAuC,EAAAG,QAAA,GAAA/C,QAAAmB,EAAA,SAAAnG,EAAAuG,EAAAC,EAAAkC,EAAAC,EAAAC,GACA,GAAArC,EACA9G,EAAA2H,qBAAAZ,EAAA/I,WACW,IAAAiL,GAAAC,EACX,UAAAxB,MAAA,sDACW,GAAAyB,EACX,UAAAzB,MAAA,oDAGA,WAEA,SAIA,GAAAf,EAAAc,KAAAU,EAAAb,MACAtH,EAAA2H,qBAAAQ,EAAAb,KAAAtJ,YAIA,GAAAwI,EAAAiB,KAAAU,EAAAb,MAAA,CAIA,GAAAa,EAAAG,QAAAtK,OAAA,EACA,UAAA4H,WAAA,iEAGAuC,EAAAb,KAAA/B,QAAAiB,EAAA,SAAAjG,EAAAuG,EAAAC,EAAAkC,EAAAC,EAAAC,GAgBA,MAdA,MAAApC,EACA/G,EAAAoJ,sBAAAtC,EAAA9I,OAEAiL,GAAA,MAAAA,EAAA,GACAjJ,EAAAwI,sBAAAS,EAAAjL,OAEAkL,GAAAC,GACAnJ,EAAAoJ,sBAAAF,EAAAlL,OACAgC,EAAAwI,sBAAAU,EAAAlL,OAAAmL,EAAAnL,SAEAgC,EAAAoJ,sBAAAtC,EAAA9I,OACAgC,EAAAwI,sBAAA1B,EAAA9I,QAGA,KAGAmK,EAAAG,QAAAtK,SACAgC,EAAiBpD,OAAA+L,EAAA,SAAA/L,CAASA,OAAA+L,EAAA,SAAA/L,CAAQ,GAAGoD,GAAA4G,EAAAuB,EAAAG,QAAA,WAOrC,GAAA7B,EAAAgB,KAAAU,EAAAb,MACAtH,EAAepD,OAAA+L,EAAA,SAAA/L,CAASA,OAAA+L,EAAA,SAAA/L,CAAQ,GAAGoD,GAAA4G,EAAAuB,EAAAb,WADnC,CAKA,IAAAQ,EAAAZ,EAAAiB,EAAAb,MAEAQ,IACA9H,EAAepD,OAAA+L,EAAA,SAAA/L,CAASA,OAAA+L,EAAA,SAAA/L,CAAQ,GAAGoD,GAAA8H,IAGnC,IAAAuB,EAAAhC,EAAAc,EAAAb,MAEA+B,IACArJ,EAAepD,OAAA+L,EAAA,SAAA/L,CAASA,OAAA+L,EAAA,SAAA/L,CAAQ,GAAGoD,GAAAqJ,KAInC,OAAArJ,ECnVA,IAAAsJ,EAAA,IAAAC,OAAA,IAAmDpE,EAAqBqE,OAAA,KACxEC,EAAA,IAAAF,OAA2CpE,EAAqBqE,OAAA,MAEhE,SAAAE,EAAAC,EAAAC,GACA,OACAD,QACAC,OAMA,IAAAC,IAAAxM,OAAAJ,UAAA6M,WACAC,IAAA1M,OAAA2M,cACAC,IAAArN,OAAAsN,YACAC,IAAA9M,OAAAJ,UAAAmN,YACAC,IAAAhN,OAAAJ,UAAAqN,UACAC,IAAAlN,OAAAJ,UAAAuN,QAEAC,IADAC,OAAAD,cACAC,OAAAD,cAAA,SAAA3M,GACA,wBAAAA,GAAA6M,SAAA7M,IAAA8M,KAAAC,MAAA/M,QAAA8M,KAAAE,IAAAhN,IAAA,kBAGAiN,GAAA,EAEA,IASAA,EAAuF,OAAxD,QAAFxE,EAR7ByE,EAAA,4CAAqD,MAQtBC,KAAA,YAA+B,IAAF1E,OAAE,EAAuBA,EAAE,IACtF,MAAAhG,IACDwK,GAAA,EAGA,IA6EAG,EA7EApB,EAAAD,EACA,SAAAjM,EAAAuN,EAAAC,GACA,OAAAxN,EAAAkM,WAAAqB,EAAAC,IAEA,SAAAxN,EAAAuN,EAAAC,GACA,OAAAxN,EAAA4J,MAAA4D,IAAAD,EAAAnN,UAAAmN,GAEAnB,EAAAD,EAAA1M,OAAA2M,cACA,WAGA,IAFA,IAAAqB,EAAA,GAEApD,EAAA,EAAkBA,EAAAlK,UAAAC,OAAuBiK,IACzCoD,EAAApD,GAAAlK,UAAAkK,GAQA,IALA,IAGAqD,EAHAC,EAAA,GACAvN,EAAAqN,EAAArN,OACAH,EAAA,EAGAG,EAAAH,GAAA,CAEA,IADAyN,EAAAD,EAAAxN,MACA,cAAA+H,WAAA0F,EAAA,8BACAC,GAAAD,EAAA,MAAAjO,OAAAmO,aAAAF,GAAAjO,OAAAmO,aAAA,QAAAF,GAAA,YAAAA,EAAA,YAGA,OAAAC,GAEArB,EACAD,EAAArN,OAAAsN,YACA,SAAAuB,GAGA,IAFA,IAAAC,EAAA,GAEAzD,EAAA,EAAA0D,EAAAF,EAAuCxD,EAAA0D,EAAA3N,OAAuBiK,IAAA,CAC9D,IAAA2D,EAAAD,EAAA1D,GACA1G,EAAAqK,EAAA,GACA3K,EAAA2K,EAAA,GACAF,EAAAnK,GAAAN,EAGA,OAAAyK,GAEAtB,EAAAD,EACA,SAAAvM,EAAAiO,GACA,OAAAjO,EAAAwM,YAAAyB,IAEA,SAAAjO,EAAAiO,GACA,IAAAC,EAAAlO,EAAAI,OAEA,KAAA6N,EAAA,GAAAA,GAAAC,GAAA,CAIA,IACA1F,EADA2F,EAAAnO,EAAAoO,WAAAH,GAEA,OAAAE,EAAA,OAAAA,EAAA,OAAAF,EAAA,IAAAC,IAAA1F,EAAAxI,EAAAoO,WAAAH,EAAA,WAAAzF,EAAA,MAAA2F,EAAA3F,EAAA,OAAA2F,EAAA,mBAEAzB,EAAAD,EACA,SAAAzM,GACA,OAAAA,EAAA0M,aAEA,SAAA1M,GACA,OAAAA,EAAA2H,QAAA+D,EAAA,KAEAkB,EAAAD,EACA,SAAA3M,GACA,OAAAA,EAAA4M,WAEA,SAAA5M,GACA,OAAAA,EAAA2H,QAAAkE,EAAA,KAGA,SAAAuB,EAAApN,EAAAqO,GACA,WAAA1C,OAAA3L,EAAAqO,GAMA,GAAAlB,EAAA,CAEA,IAAAmB,EAAAlB,EAAA,4CAAyE,MAEzEE,EAAA,SAAAtN,EAAAiO,GACA,IAAAD,EAIA,OAFAM,EAAAC,UAAAN,EAEA,QAAAD,EADAM,EAAAjB,KAAArN,GACA,cAAAgO,IAAA,SAIAV,EAAA,SAAAtN,EAAAiO,GAGA,IAFA,IAAArG,EAAA,KAEA,CACA,IAAA9G,EAAA0L,EAAAxM,EAAAiO,GAEA,QAAApK,IAAA/C,GAAA0N,GAAA1N,IAAA2N,GAAA3N,GACA,MAGA8G,EAAApE,KAAA1C,GACAmN,GAAAnN,GAAA,UAGA,OAAAsL,EAAA/L,WAAA,EAAAuH,IAIA,IAAI8G,GAEJ,WACA,SAAAC,EAAAC,EAAAlE,QACA,IAAAA,IACAA,EAAA,IAGA/K,KAAAiP,UACAjP,KAAA6N,SAAA,CACAqB,OAAA,EACAC,KAAA,EACAC,OAAA,GAEApP,KAAAqP,YAAAtE,EAAAsE,UACArP,KAAAsP,sBAAAvE,EAAAuE,oBACAtP,KAAAuP,uBAAAxE,EAAAwE,qBA6/BA,OA1/BAP,EAAAtP,UAAA8P,MAAA,WACA,OAAAxP,KAAAkP,SACA,MAAA/E,MAAA,gCAGA,OAAAnK,KAAAyP,aAAA,UAGAT,EAAAtP,UAAA+P,aAAA,SAAAC,EAAAC,EAAAC,GAGA,IAFA,IAAA5B,EAAA,IAEAhO,KAAA6P,SAAA,CACA,IAAAC,EAAA9P,KAAA8P,OAEA,SAAAA,EAEA,CAGA,IAFArN,EAAAzC,KAAA+P,cAAAL,EAAAE,IAEAI,IACA,OAAAvN,EAGAuL,EAAAnK,KAAApB,EAAAwN,SACS,UAAAH,GAETJ,EAAA,EACA,MACO,QAAAI,GAEP,WAAAH,GAAA,kBAAAA,EAOO,SAAAG,IAEP9P,KAAAqP,WAAA,KAAArP,KAAAkQ,OACA,CACA,GAAAN,EACA,MAEA,OAAA5P,KAAAsE,MAA8ByB,EAASoK,sBAAAhE,EAAAnM,KAAAoQ,gBAAApQ,KAAAoQ,kBAE9B,QAAAN,IAET9P,KAAAqP,WAAAgB,GAAArQ,KAAAkQ,QAAA,IAGA,IAFAzN,EAAAzC,KAAAsQ,SAAAZ,EAAAC,IAEAK,IACA,OAAAvN,EAGAuL,EAAAnK,KAAApB,EAAAwN,SACO,CACP,IAAAxN,EAEA,IAFAA,EAAAzC,KAAAuQ,aAAAb,EAAAC,IAEAK,IACA,OAAAvN,EAGAuL,EAAAnK,KAAApB,EAAAwN,UAjCA,CACA,IAAApC,EAAA7N,KAAAoQ,gBACApQ,KAAAwQ,OACAxC,EAAAnK,KAAA,CACAuC,KAAgBJ,EAAImB,MACpBsJ,SAAAtE,EAAA0B,EAAA7N,KAAAoQ,qBAgCA,OACAH,IAAAjC,EACAgC,IAAA,OAuBAhB,EAAAtP,UAAA4Q,SAAA,SAAAZ,EAAAC,GACA,IAAAe,EAAA1Q,KAAAoQ,gBACApQ,KAAAwQ,OAEA,IAAAG,EAAA3Q,KAAA4Q,eAGA,GAFA5Q,KAAA6Q,YAEA7Q,KAAA8Q,OAAA,MAEA,OACAb,IAAA,CACA7J,KAAgBJ,EAAIK,QACpBhE,MAAA,IAAAsO,EAAA,KACAF,SAAAtE,EAAAuE,EAAA1Q,KAAAoQ,kBAEAJ,IAAA,MAEK,GAAAhQ,KAAA8Q,OAAA,MACL,IAAAC,EAAA/Q,KAAAyP,aAAAC,EAAA,EAAAC,GAAA,GAEA,GAAAoB,EAAAf,IACA,OAAAe,EAGA,IAAAC,EAAAD,EAAAd,IAEAgB,EAAAjR,KAAAoQ,gBAEA,GAAApQ,KAAA8Q,OAAA,OACA,GAAA9Q,KAAA6P,UAAAQ,GAAArQ,KAAA8P,QACA,OAAA9P,KAAAsE,MAA4ByB,EAASmL,YAAA/E,EAAA8E,EAAAjR,KAAAoQ,kBAGrC,IAAAe,EAAAnR,KAAAoQ,gBAGA,OAAAO,IAFA3Q,KAAA4Q,eAGA5Q,KAAAsE,MAA4ByB,EAASoK,sBAAAhE,EAAAgF,EAAAnR,KAAAoQ,mBAGrCpQ,KAAA6Q,YAEA7Q,KAAA8Q,OAAA,KAIA,CACAb,IAAA,CACA7J,KAAkBJ,EAAIqB,IACtBhF,MAAAsO,EACAK,WACAP,SAAAtE,EAAAuE,EAAA1Q,KAAAoQ,kBAEAJ,IAAA,MAVAhQ,KAAAsE,MAA4ByB,EAASmL,YAAA/E,EAAA8E,EAAAjR,KAAAoQ,mBAarC,OAAApQ,KAAAsE,MAA0ByB,EAASqL,aAAAjF,EAAAuE,EAAA1Q,KAAAoQ,kBAGnC,OAAApQ,KAAAsE,MAAwByB,EAASmL,YAAA/E,EAAAuE,EAAA1Q,KAAAoQ,mBAQjCpB,EAAAtP,UAAAkR,aAAA,WACA,IA+2BAzP,EA/2BAkQ,EAAArR,KAAAkP,SAGA,IAFAlP,KAAAwQ,QAEAxQ,KAAA6P,UA62BA,MADA1O,EA52BAnB,KAAA8P,SA+2BA,KAAA3O,GAEAA,GAAA,IAAAA,GAAA,IAEA,KAAAA,GAEAA,GAAA,IAAAA,GAAA,KAEAA,GAAA,IAAAA,GAAA,IAEA,KAAAA,MAAA,KAAAA,GAAA,KAAAA,GAAA,KAAAA,GAAA,KAAAA,GAAA,KAAAA,GAAA,KAAAA,GAAA,KAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,SAx3BAnB,KAAAwQ,OAGA,OAAAxQ,KAAAiP,QAAAhF,MAAAoH,EAAArR,KAAAkP,WAGAF,EAAAtP,UAAA6Q,aAAA,SAAAb,EAAAC,GAIA,IAHA,IAAAvD,EAAApM,KAAAoQ,gBACA/N,EAAA,KAEA,CACA,IAAAiP,EAAAtR,KAAAuR,cAAA5B,GAEA,GAAA2B,EACAjP,GAAAiP,MADA,CAKA,IAAAE,EAAAxR,KAAAyR,iBAAA/B,EAAAC,GAEA,GAAA6B,EACAnP,GAAAmP,MADA,CAKA,IAAAE,EAAA1R,KAAA2R,2BAEA,IAAAD,EAKA,MAJArP,GAAAqP,IAOA,IAAAjB,EAAAtE,EAAAC,EAAApM,KAAAoQ,iBACA,OACAH,IAAA,CACA7J,KAAcJ,EAAIK,QAClBhE,QACAoO,YAEAT,IAAA,OAIAhB,EAAAtP,UAAAiS,yBAAA,WACA,OAAA3R,KAAA6P,SAAA,KAAA7P,KAAA8P,SAEA9P,KAAAqP,YAozBAgB,GADAuB,EAlzBA5R,KAAAkQ,QAAA,IAmzBA,KAAA0B,GA7yBA,MALA5R,KAAAwQ,OAEA,KA+yBA,IAAAoB,GAnyBA5C,EAAAtP,UAAA6R,cAAA,SAAA5B,GACA,GAAA3P,KAAA6P,SAAA,KAAA7P,KAAA8P,OAGA,YAKA,OAAA9P,KAAAkQ,QACA,QAMA,OAFAlQ,KAAAwQ,OACAxQ,KAAAwQ,OACA,IAGA,SACA,QACA,QACA,SACA,MAEA,QAEA,cAAAb,GAAA,kBAAAA,EACA,MAGA,YAEA,QACA,YAGA3P,KAAAwQ,OAEA,IAAA1C,EAAA,CAAA9N,KAAA8P,QAIA,IAFA9P,KAAAwQ,QAEAxQ,KAAA6P,SAAA,CACA,IAAAgC,EAAA7R,KAAA8P,OAEA,QAAA+B,EAEA,CACA,QAAA7R,KAAAkQ,OAMa,CAEblQ,KAAAwQ,OACA,MANA1C,EAAAjK,KAAA,IAEA7D,KAAAwQ,YAOA1C,EAAAjK,KAAAgO,GAGA7R,KAAAwQ,OAGA,OAAA/D,EAAA/L,WAAA,EAAAoN,IAGAkB,EAAAtP,UAAA+R,iBAAA,SAAA/B,EAAAC,GACA,GAAA3P,KAAA6P,QACA,YAGA,IAAAgC,EAAA7R,KAAA8P,OAEA,YAAA+B,GAEA,MAAAA,GAEA,KAAAA,IAEA,WAAAlC,GAAA,kBAAAA,IAAA,MAAAkC,GAEAnC,EAAA,EACA,MAEA1P,KAAAwQ,OACA/D,EAAAoF,KAIA7C,EAAAtP,UAAAqQ,cAAA,SAAAL,EAAAE,GACA,IAAAkC,EAAA9R,KAAAoQ,gBAKA,GAJApQ,KAAAwQ,OAEAxQ,KAAA6Q,YAEA7Q,KAAA6P,QACA,OAAA7P,KAAAsE,MAAwByB,EAASgM,8BAAA5F,EAAA2F,EAAA9R,KAAAoQ,kBAGjC,SAAApQ,KAAA8P,OAIA,OADA9P,KAAAwQ,OACAxQ,KAAAsE,MAA0ByB,EAASiM,eAAA7F,EAAA2F,EAAA9R,KAAAoQ,kBAInC,IAAA/N,EAAArC,KAAAiS,4BAAA5P,MAEA,IAAAA,EACA,OAAArC,KAAAsE,MAAwByB,EAASmM,mBAAA/F,EAAA2F,EAAA9R,KAAAoQ,kBAKjC,GAFApQ,KAAA6Q,YAEA7Q,KAAA6P,QACA,OAAA7P,KAAAsE,MAAwByB,EAASgM,8BAAA5F,EAAA2F,EAAA9R,KAAAoQ,kBAGjC,OAAApQ,KAAA8P,QAEA,SAMA,OAFA9P,KAAAwQ,OAEA,CACAP,IAAA,CACA7J,KAAoBJ,EAAIO,SAExBlE,QACAoO,SAAAtE,EAAA2F,EAAA9R,KAAAoQ,kBAEAJ,IAAA,MAKA,QAQA,OAJAhQ,KAAAwQ,OAEAxQ,KAAA6Q,YAEA7Q,KAAA6P,QACA7P,KAAAsE,MAA8ByB,EAASgM,8BAAA5F,EAAA2F,EAAA9R,KAAAoQ,kBAGvCpQ,KAAAmS,qBAAAzC,EAAAE,EAAAvN,EAAAyP,GAGA,QACA,OAAA9R,KAAAsE,MAA0ByB,EAASmM,mBAAA/F,EAAA2F,EAAA9R,KAAAoQ,oBASnCpB,EAAAtP,UAAAuS,0BAAA,WACA,IAAAG,EAAApS,KAAAoQ,gBACAiB,EAAArR,KAAAkP,SACA7M,EAAAsL,EAAA3N,KAAAiP,QAAAoC,GACAgB,EAAAhB,EAAAhP,EAAA5B,OAIA,OAHAT,KAAAsS,OAAAD,GAGA,CACAhQ,QACAoO,SAHAtE,EAAAiG,EADApS,KAAAoQ,mBAQApB,EAAAtP,UAAAyS,qBAAA,SAAAzC,EAAAE,EAAAvN,EAAAyP,GACA,IAAAzD,EAKAkE,EAAAvS,KAAAoQ,gBACAoC,EAAAxS,KAAAiS,4BAAA5P,MACAoQ,EAAAzS,KAAAoQ,gBAEA,OAAAoC,GACA,OAEA,OAAAxS,KAAAsE,MAA0ByB,EAAS2M,qBAAAvG,EAAAoG,EAAAE,IAEnC,aACA,WACA,WAKAzS,KAAA6Q,YACA,IAAA8B,EAAA,KAEA,GAAA3S,KAAA8Q,OAAA,MACA9Q,KAAA6Q,YACA,IAAA+B,EAAA5S,KAAAoQ,gBAGA,IAFA3N,EAAAzC,KAAA6S,iCAEA7C,IACA,OAAAvN,EAKA,QAFAkF,EAAAsF,EAAAxK,EAAAwN,MAEAxP,OACA,OAAAT,KAAAsE,MAAgCyB,EAAS+M,sBAAA3G,EAAAnM,KAAAoQ,gBAAApQ,KAAAoQ,kBAIzCuC,EAAA,CACAhL,QACAoL,cAHA5G,EAAAyG,EAAA5S,KAAAoQ,kBASA,IAFA4C,EAAAhT,KAAAiT,sBAAAnB,IAEA9B,IACA,OAAAgD,EAGA,IAAAE,EAAA/G,EAAA2F,EAAA9R,KAAAoQ,iBAEA,GAAAuC,GAAApG,EAAA,OAAAoG,QAAA,IAAAA,OAAA,EAAAA,EAAAhL,MAAA,SAEA,IAAAI,EAAAgF,EAAA4F,EAAAhL,MAAAsC,MAAA,IAEA,cAAAuI,EAGA,OAFA/P,EAAAzC,KAAAmT,8BAAApL,EAAA4K,EAAAI,gBAEA/C,IACAvN,EAGA,CACAwN,IAAA,CACA7J,KAAwBJ,EAAIS,OAC5BpE,QACAoO,SAAAyC,EACAvL,MAAAlF,EAAAwN,KAEAD,IAAA,MAGA,OAAAjI,EAAAtH,OACA,OAAAT,KAAAsE,MAAkCyB,EAASqN,0BAAAF,GAG3C,IAAAvL,EAAA,CACAvB,KAAsBH,EAAauB,SACnC6L,QAAAtL,EACA0I,SAAAkC,EAAAI,cACAO,cAAAtT,KAAAuP,qBAA2DzH,EAAqBC,GAAA,IAGhF,OACAkI,IAAA,CACA7J,KAHA,SAAAoM,EAA8CxM,EAAIW,KAAQX,EAAIa,KAI9DxE,QACAoO,SAAAyC,EACAvL,SAEAqI,IAAA,MAMA,OACAC,IAAA,CACA7J,KAAA,WAAAoM,EAA2CxM,EAAIS,OAAA,SAAA+L,EAA+BxM,EAAIW,KAAQX,EAAIa,KAC9FxE,QACAoO,SAAAyC,EACAvL,MAAA,QAAA0G,EAAA,OAAAsE,QAAA,IAAAA,OAAA,EAAAA,EAAAhL,aAAA,IAAA0G,IAAA,MAEA2B,IAAA,MAIA,aACA,oBACA,aAKA,IAAAuD,EAAAvT,KAAAoQ,gBAGA,GAFApQ,KAAA6Q,aAEA7Q,KAAA8Q,OAAA,KACA,OAAA9Q,KAAAsE,MAA8ByB,EAASyN,+BAAArH,EAAAoH,EAAmElU,OAAA+L,EAAA,SAAA/L,CAAQ,GAAGkU,KAGrHvT,KAAA6Q,YASA,IAAA4C,EAAAzT,KAAAiS,4BACAyB,EAAA,EAEA,cAAAlB,GAAA,WAAAiB,EAAApR,MAAA,CACA,IAAArC,KAAA8Q,OAAA,KACA,OAAA9Q,KAAAsE,MAAgCyB,EAAS4N,oCAAAxH,EAAAnM,KAAAoQ,gBAAApQ,KAAAoQ,kBAIzC,IAAA3N,EAEA,GAHAzC,KAAA6Q,aACApO,EAAAzC,KAAA4T,uBAAqD7N,EAAS4N,oCAAsC5N,EAAS8N,uCAE7G7D,IACA,OAAAvN,EAIAzC,KAAA6Q,YACA4C,EAAAzT,KAAAiS,4BACAyB,EAAAjR,EAAAwN,IAGA,IAMA+C,EANAc,EAAA9T,KAAA+T,8BAAArE,EAAA8C,EAAA5C,EAAA6D,GAEA,GAAAK,EAAA9D,IACA,OAAA8D,EAKA,IAFAd,EAAAhT,KAAAiT,sBAAAnB,IAEA9B,IACA,OAAAgD,EAGA,IAAAgB,EAAA7H,EAAA2F,EAAA9R,KAAAoQ,iBAEA,iBAAAoC,EACA,CACAvC,IAAA,CACA7J,KAAsBJ,EAAIe,OAC1B1E,QACA0I,QAAA4B,EAAAmH,EAAA7D,KACAQ,SAAAuD,GAEAhE,IAAA,MAGA,CACAC,IAAA,CACA7J,KAAsBJ,EAAIiB,OAC1B5E,QACA0I,QAAA4B,EAAAmH,EAAA7D,KACAf,OAAAwE,EACAO,WAAA,WAAAzB,EAAA,qBACA/B,SAAAuD,GAEAhE,IAAA,MAKA,QACA,OAAAhQ,KAAAsE,MAA0ByB,EAASmO,sBAAA/H,EAAAoG,EAAAE,MAInCzD,EAAAtP,UAAAuT,sBAAA,SAAAnB,GAGA,OAAA9R,KAAA6P,SAAA,MAAA7P,KAAA8P,OAGA9P,KAAAsE,MAA0ByB,EAASgM,8BAAA5F,EAAA2F,EAAA9R,KAAAoQ,mBAGnCpQ,KAAAwQ,OAEA,CACAP,KAAA,EACAD,IAAA,QAQAhB,EAAAtP,UAAAmT,8BAAA,WAIA,IAHA,IAAAsB,EAAA,EACAzD,EAAA1Q,KAAAoQ,iBAEApQ,KAAA6P,SAAA,CAGA,OAFA7P,KAAA8P,QAGA,QAMA9P,KAAAwQ,OACA,IAAA4D,EAAApU,KAAAoQ,gBAEA,IAAApQ,KAAAqU,UAAA,KACA,OAAArU,KAAAsE,MAAgCyB,EAASuO,iCAAAnI,EAAAiI,EAAApU,KAAAoQ,kBAGzCpQ,KAAAwQ,OACA,MAGA,SAIA2D,GAAA,EACAnU,KAAAwQ,OACA,MAGA,SAIA,KAAA2D,EAAA,GAGA,OACAlE,IAAAjQ,KAAAiP,QAAAhF,MAAAyG,EAAAxB,OAAAlP,KAAAkP,UACAc,IAAA,MAJAmE,GAAA,EAQA,MAGA,QACAnU,KAAAwQ,QAKA,OACAP,IAAAjQ,KAAAiP,QAAAhF,MAAAyG,EAAAxB,OAAAlP,KAAAkP,UACAc,IAAA,OAIAhB,EAAAtP,UAAAyT,8BAAA,SAAApL,EAAA0I,GACA,IAAAhG,EAAA,GAEA,IACAA,EDt2BO,SAAA1C,GACP,OAAAA,EAAAtH,OACA,UAAA0J,MAAA,mCASA,IALA,IAGAM,EAAA,GAEAC,EAAA,EAAA6J,EALAxM,EAAAyM,MAAoCzL,GAAiB0L,OAAA,SAAAC,GACrD,OAAAA,EAAAjU,OAAA,IAIiDiK,EAAA6J,EAAA9T,OAA4BiK,IAAA,CAC7E,IACAiK,EADAJ,EAAA7J,GACA8J,MAAA,KAEA,OAAAG,EAAAlU,OACA,UAAA0J,MAAA,2BAMA,IAHA,IAAAJ,EAAA4K,EAAA,GACA5J,EAAA4J,EAAA1K,MAAA,GAEAoE,EAAA,EAAAuG,EAAA7J,EAAyCsD,EAAAuG,EAAAnU,OAAuB4N,IAGhE,OAFAuG,EAAAvG,GAEA5N,OACA,UAAA0J,MAAA,2BAIAM,EAAA5G,KAAA,CACAkG,OACAgB,YAIA,OAAAN,ECk0Be0I,CAA6BpL,GACvC,MAAApH,GACL,OAAAX,KAAAsE,MAAwByB,EAAS8O,wBAAApE,GAGjC,OACAR,IAAA,CACA7J,KAAcH,EAAaQ,OAC3BgE,SACAgG,WACA6C,cAAAtT,KAAAuP,qBAAmD/E,EAAmBC,GAAA,IAEtEuF,IAAA,OAeAhB,EAAAtP,UAAAqU,8BAAA,SAAArE,EAAAC,EAAAmF,EAAAC,GAWA,IAVA,IAAA1G,EAEA2G,GAAA,EACAjK,EAAA,GACAkK,EAAA,IAAAC,IACAC,EAAAJ,EAAA1S,MACA+S,EAAAL,EAAAtE,WAIA,CACA,OAAA0E,EAAA1U,OAAA,CACA,IAAAiQ,EAAA1Q,KAAAoQ,gBAEA,cAAAT,IAAA3P,KAAA8Q,OAAA,KAWA,MATA,IAAArO,EAAAzC,KAAA4T,uBAAmD7N,EAASsP,gCAAkCtP,EAASuP,kCAEvG,GAAA7S,EAAAuN,IACA,OAAAvN,EAGA2S,EAAAjJ,EAAAuE,EAAA1Q,KAAAoQ,iBACA+E,EAAAnV,KAAAiP,QAAAhF,MAAAyG,EAAAxB,OAAAlP,KAAAkP,UAOA,GAAA+F,EAAApP,IAAAsP,GACA,OAAAnV,KAAAsE,MAAA,WAAAqL,EAAuD5J,EAASwP,mCAAsCxP,EAASyP,mCAAAJ,GAG/G,UAAAD,IACAH,GAAA,GAMAhV,KAAA6Q,YACA,IAAAiB,EAAA9R,KAAAoQ,gBAEA,IAAApQ,KAAA8Q,OAAA,KACA,OAAA9Q,KAAAsE,MAAA,WAAAqL,EAAuD5J,EAAS0P,yCAA4C1P,EAAS2P,yCAAAvJ,EAAAnM,KAAAoQ,gBAAApQ,KAAAoQ,kBAGrH,IAAAuF,EAAA3V,KAAAyP,aAAAC,EAAA,EAAAC,EAAAmF,GAEA,GAAAa,EAAA3F,IACA,OAAA2F,EAGA,IAAA3C,EAAAhT,KAAAiT,sBAAAnB,GAEA,GAAAkB,EAAAhD,IACA,OAAAgD,EAGAjI,EAAAlH,KAAA,CAAAsR,EAAA,CACA9S,MAAAsT,EAAA1F,IACAQ,SAAAtE,EAAA2F,EAAA9R,KAAAoQ,oBAGA6E,EAAAW,IAAAT,GAEAnV,KAAA6Q,YACAsE,GAAA9G,EAAArO,KAAAiS,6BAAA5P,MAAA+S,EAAA/G,EAAAoC,SAGA,WAAA1F,EAAAtK,OACAT,KAAAsE,MAAA,WAAAqL,EAAqD5J,EAAS8P,gCAAmC9P,EAASsP,gCAAAlJ,EAAAnM,KAAAoQ,gBAAApQ,KAAAoQ,kBAG1GpQ,KAAAsP,sBAAA0F,EACAhV,KAAAsE,MAAwByB,EAAS+P,qBAAA3J,EAAAnM,KAAAoQ,gBAAApQ,KAAAoQ,kBAGjC,CACAH,IAAAlF,EACAiF,IAAA,OAIAhB,EAAAtP,UAAAkU,uBAAA,SAAAmC,EAAAC,GACA,IAAAC,EAAA,EACA7D,EAAApS,KAAAoQ,gBAEApQ,KAAA8Q,OAAA,MAA4B9Q,KAAA8Q,OAAA,OAC5BmF,GAAA,GAMA,IAHA,IAAAC,GAAA,EACAC,EAAA,GAEAnW,KAAA6P,SAAA,CACA,IAAAgC,EAAA7R,KAAA8P,OAEA,KAAA+B,GAAA,IAEAA,GAAA,IAOA,MAJAqE,GAAA,EACAC,EAAA,GAAAA,GAAAtE,EAAA,IACA7R,KAAAwQ,OAMA,IAAAC,EAAAtE,EAAAiG,EAAApS,KAAAoQ,iBAEA,OAAA8F,EAMAhJ,EAFAiJ,GAAAF,GAMA,CACAhG,IAAAkG,EACAnG,IAAA,MALAhQ,KAAAsE,MAAA0R,EAAAvF,GANAzQ,KAAAsE,MAAAyR,EAAAtF,IAeAzB,EAAAtP,UAAAwP,OAAA,WACA,OAAAlP,KAAA6N,SAAAqB,QAGAF,EAAAtP,UAAAmQ,MAAA,WACA,OAAA7P,KAAAkP,WAAAlP,KAAAiP,QAAAxO,QAGAuO,EAAAtP,UAAA0Q,cAAA,WAEA,OACAlB,OAAAlP,KAAA6N,SAAAqB,OACAC,KAAAnP,KAAA6N,SAAAsB,KACAC,OAAApP,KAAA6N,SAAAuB,SASAJ,EAAAtP,UAAAoQ,KAAA,WACA,IAAAZ,EAAAlP,KAAA6N,SAAAqB,OAEA,GAAAA,GAAAlP,KAAAiP,QAAAxO,OACA,MAAA0J,MAAA,gBAGA,IAAA4D,EAAAlB,EAAA7M,KAAAiP,QAAAC,GAEA,QAAAhL,IAAA6J,EACA,MAAA5D,MAAA,UAAA+E,EAAA,4CAGA,OAAAnB,GAGAiB,EAAAtP,UAAA4E,MAAA,SAAAsB,EAAA6K,GACA,OACAR,IAAA,KACAD,IAAA,CACApK,OACAqJ,QAAAjP,KAAAiP,QACAwB,cAOAzB,EAAAtP,UAAA8Q,KAAA,WACA,IAAAxQ,KAAA6P,QAAA,CAIA,IAAA9B,EAAA/N,KAAA8P,OAEA,KAAA/B,GAGA/N,KAAA6N,SAAAsB,MAAA,EACAnP,KAAA6N,SAAAuB,OAAA,EACApP,KAAA6N,SAAAqB,QAAA,IAEAlP,KAAA6N,SAAAuB,QAAA,EAEApP,KAAA6N,SAAAqB,QAAAnB,EAAA,aAWAiB,EAAAtP,UAAAoR,OAAA,SAAAsF,GACA,GAAA7J,EAAAvM,KAAAiP,QAAAmH,EAAApW,KAAAkP,UAAA,CACA,QAAA5O,EAAA,EAAqBA,EAAA8V,EAAA3V,OAAmBH,IACxCN,KAAAwQ,OAGA,SAGA,UAQAxB,EAAAtP,UAAA2U,UAAA,SAAAhB,GACA,IAAAgD,EAAArW,KAAAkP,SACAZ,EAAAtO,KAAAiP,QAAArO,QAAAyS,EAAAgD,GAEA,OAAA/H,GAAA,GACAtO,KAAAsS,OAAAhE,IACA,IAEAtO,KAAAsS,OAAAtS,KAAAiP,QAAAxO,SACA,IASAuO,EAAAtP,UAAA4S,OAAA,SAAAgE,GACA,GAAAtW,KAAAkP,SAAAoH,EACA,MAAAnM,MAAA,gBAAAmM,EAAA,wDAAAtW,KAAAkP,UAKA,IAFAoH,EAAAjJ,KAAAkJ,IAAAD,EAAAtW,KAAAiP,QAAAxO,UAEA,CACA,IAAAyO,EAAAlP,KAAAkP,SAEA,GAAAA,IAAAoH,EACA,MAGA,GAAApH,EAAAoH,EACA,MAAAnM,MAAA,gBAAAmM,EAAA,4CAKA,GAFAtW,KAAAwQ,OAEAxQ,KAAA6P,QACA,QAOAb,EAAAtP,UAAAmR,UAAA,WACA,MAAA7Q,KAAA6P,SAAAhB,GAAA7O,KAAA8P,SACA9P,KAAAwQ,QASAxB,EAAAtP,UAAAwQ,KAAA,WACA,GAAAlQ,KAAA6P,QACA,YAGA,IAAA9B,EAAA/N,KAAA8P,OACAZ,EAAAlP,KAAAkP,SACAsH,EAAAxW,KAAAiP,QAAAR,WAAAS,GAAAnB,GAAA,YACA,cAAAyI,QAAA,IAAAA,IAAA,MAGAxH,EA3gCA,GAqhCA,SAAAqB,GAAAuB,GACA,OAAAA,GAAA,IAAAA,GAAA,KAAAA,GAAA,IAAAA,GAAA,GA+BA,SAAA/C,GAAA1N,GACA,OAAAA,GAAA,GAAAA,GAAA,SAAAA,GAAA,MAAAA,MAAA,MAAAA,GAAA,aAAAA,GAAA,OAAAA,EAQA,SAAA2N,GAAA3N,GACA,OAAAA,GAAA,IAAAA,GAAA,SAAAA,MAAA,IAAAA,GAAA,SAAAA,GAAA,KAAAA,GAAA,KAAAA,GAAA,KAAAA,GAAA,KAAAA,GAAA,KAAAA,MAAA,IAAAA,GAAA,IAAAA,GAAA,IAAAA,GAAA,IAAAA,GAAA,IAAAA,GAAA,IAAAA,GAAA,IAAAA,GAAA,SAAAA,GAAA,KAAAA,GAAA,KAAAA,GAAA,KAAAA,GAAA,KAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,MAAA,KAAAA,GAAA,WAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,MAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,aAAAA,GAAA,OAAAA,GAAA,OAAAA,MAAA,MAAAA,GAAA,aAAAA,GAAA,OAAAA,GAAA,OAAAA,MAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,aAAAA,GAAA,OAAAA,MAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,aAAAA,GAAA,OAAAA,GAAA,OAAAA,MAAA,MAAAA,GAAA,aAAAA,GAAA,OAAAA,MAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,aAAAA,MAAA,MAAAA,GAAA,aAAAA,MAAA,MAAAA,GAAA,aAAAA,MAAA,MAAAA,GAAA,aAAAA,MAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,aAAAA,GAAA,OAAAA,GAAA,OAAAA,MAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,aAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,MAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,YAAAA,GAAA,OAAAA,MAAA,MAAAA,GAAA,aAAAA,MAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,aAAAA,MAAA,MAAAA,GAAA,aAAAA,MAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,aAAAA,MAAA,MAAAA,GAAA,eAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,MAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,eAAAA,GAAA,QAAAA,MAAA,OAAAA,GAAA,eAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,MAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,eAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,MAAA,OAAAA,GAAA,eAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,MAAA,OAAAA,GAAA,eAAAA,GAAA,QAAAA,MAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,eAAAA,MAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,eAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,MAAA,OAAAA,GAAA,eAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,MAAA,OA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","file":"static/js/4.60d59514.chunk.js","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nexport { _assign as __assign };\nexport function __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nexport function __param(paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n}\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\nexport function __generator(thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\nexport var __createBinding = Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n};\nexport function __exportStar(m, o) {\n  for (var p in m) {\n    if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n  }\n}\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\n/** @deprecated */\n\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n\n  return ar;\n}\n/** @deprecated */\n\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n}\nexport function __spreadArray(to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n}\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []),\n      i,\n      q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i;\n\n  function verb(n) {\n    if (g[n]) i[n] = function (v) {\n      return new Promise(function (a, b) {\n        q.push([n, v, a, b]) > 1 || resume(n, v);\n      });\n    };\n  }\n\n  function resume(n, v) {\n    try {\n      step(g[n](v));\n    } catch (e) {\n      settle(q[0][3], e);\n    }\n  }\n\n  function step(r) {\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n  }\n\n  function fulfill(value) {\n    resume(\"next\", value);\n  }\n\n  function reject(value) {\n    resume(\"throw\", value);\n  }\n\n  function settle(f, v) {\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n  }\n}\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) {\n    throw e;\n  }), verb(\"return\"), i[Symbol.iterator] = function () {\n    return this;\n  }, i;\n\n  function verb(n, f) {\n    i[n] = o[n] ? function (v) {\n      return (p = !p) ? {\n        value: __await(o[n](v)),\n        done: n === \"return\"\n      } : f ? f(v) : v;\n    } : f;\n  }\n}\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n      i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n}\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n\n  return cooked;\n}\n;\n\nvar __setModuleDefault = Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n}\nexport function __importDefault(mod) {\n  return mod && mod.__esModule ? mod : {\n    default: mod\n  };\n}\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}","export var ErrorKind;\n\n(function (ErrorKind) {\n  /** Argument is unclosed (e.g. `{0`) */\n  ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_CLOSING_BRACE\"] = 1] = \"EXPECT_ARGUMENT_CLOSING_BRACE\";\n  /** Argument is empty (e.g. `{}`). */\n\n  ErrorKind[ErrorKind[\"EMPTY_ARGUMENT\"] = 2] = \"EMPTY_ARGUMENT\";\n  /** Argument is malformed (e.g. `{foo!}``) */\n\n  ErrorKind[ErrorKind[\"MALFORMED_ARGUMENT\"] = 3] = \"MALFORMED_ARGUMENT\";\n  /** Expect an argument type (e.g. `{foo,}`) */\n\n  ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_TYPE\"] = 4] = \"EXPECT_ARGUMENT_TYPE\";\n  /** Unsupported argument type (e.g. `{foo,foo}`) */\n\n  ErrorKind[ErrorKind[\"INVALID_ARGUMENT_TYPE\"] = 5] = \"INVALID_ARGUMENT_TYPE\";\n  /** Expect an argument style (e.g. `{foo, number, }`) */\n\n  ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_STYLE\"] = 6] = \"EXPECT_ARGUMENT_STYLE\";\n  /** The number skeleton is invalid. */\n\n  ErrorKind[ErrorKind[\"INVALID_NUMBER_SKELETON\"] = 7] = \"INVALID_NUMBER_SKELETON\";\n  /** The date time skeleton is invalid. */\n\n  ErrorKind[ErrorKind[\"INVALID_DATE_TIME_SKELETON\"] = 8] = \"INVALID_DATE_TIME_SKELETON\";\n  /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */\n\n  ErrorKind[ErrorKind[\"EXPECT_NUMBER_SKELETON\"] = 9] = \"EXPECT_NUMBER_SKELETON\";\n  /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */\n\n  ErrorKind[ErrorKind[\"EXPECT_DATE_TIME_SKELETON\"] = 10] = \"EXPECT_DATE_TIME_SKELETON\";\n  /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */\n\n  ErrorKind[ErrorKind[\"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\"] = 11] = \"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\";\n  /** Missing select argument options (e.g. `{foo, select}`) */\n\n  ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_OPTIONS\"] = 12] = \"EXPECT_SELECT_ARGUMENT_OPTIONS\";\n  /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */\n\n  ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 13] = \"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\";\n  /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */\n\n  ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 14] = \"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\";\n  /** Expecting a selector in `select` argument (e.g `{foo, select}`) */\n\n  ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR\"] = 15] = \"EXPECT_SELECT_ARGUMENT_SELECTOR\";\n  /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */\n\n  ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR\"] = 16] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR\";\n  /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */\n\n  ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\"] = 17] = \"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\";\n  /**\n   * Expecting a message fragment after the `plural` or `selectordinal` selector\n   * (e.g. `{foo, plural, one}`)\n   */\n\n  ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\"] = 18] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\";\n  /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */\n\n  ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_SELECTOR\"] = 19] = \"INVALID_PLURAL_ARGUMENT_SELECTOR\";\n  /**\n   * Duplicate selectors in `plural` or `selectordinal` argument.\n   * (e.g. {foo, plural, one {#} one {#}})\n   */\n\n  ErrorKind[ErrorKind[\"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\"] = 20] = \"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\";\n  /** Duplicate selectors in `select` argument.\n   * (e.g. {foo, select, apple {apple} apple {apple}})\n   */\n\n  ErrorKind[ErrorKind[\"DUPLICATE_SELECT_ARGUMENT_SELECTOR\"] = 21] = \"DUPLICATE_SELECT_ARGUMENT_SELECTOR\";\n  /** Plural or select argument option must have `other` clause. */\n\n  ErrorKind[ErrorKind[\"MISSING_OTHER_CLAUSE\"] = 22] = \"MISSING_OTHER_CLAUSE\";\n  /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */\n\n  ErrorKind[ErrorKind[\"INVALID_TAG\"] = 23] = \"INVALID_TAG\";\n  /** The tag name is invalid. (e.g. `<123>foo</123>`) */\n\n  ErrorKind[ErrorKind[\"INVALID_TAG_NAME\"] = 25] = \"INVALID_TAG_NAME\";\n  /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */\n\n  ErrorKind[ErrorKind[\"UNMATCHED_CLOSING_TAG\"] = 26] = \"UNMATCHED_CLOSING_TAG\";\n  /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */\n\n  ErrorKind[ErrorKind[\"UNCLOSED_TAG\"] = 27] = \"UNCLOSED_TAG\";\n})(ErrorKind || (ErrorKind = {}));","export var TYPE;\n\n(function (TYPE) {\n  /**\n   * Raw text\n   */\n  TYPE[TYPE[\"literal\"] = 0] = \"literal\";\n  /**\n   * Variable w/o any format, e.g `var` in `this is a {var}`\n   */\n\n  TYPE[TYPE[\"argument\"] = 1] = \"argument\";\n  /**\n   * Variable w/ number format\n   */\n\n  TYPE[TYPE[\"number\"] = 2] = \"number\";\n  /**\n   * Variable w/ date format\n   */\n\n  TYPE[TYPE[\"date\"] = 3] = \"date\";\n  /**\n   * Variable w/ time format\n   */\n\n  TYPE[TYPE[\"time\"] = 4] = \"time\";\n  /**\n   * Variable w/ select format\n   */\n\n  TYPE[TYPE[\"select\"] = 5] = \"select\";\n  /**\n   * Variable w/ plural format\n   */\n\n  TYPE[TYPE[\"plural\"] = 6] = \"plural\";\n  /**\n   * Only possible within plural argument.\n   * This is the `#` symbol that will be substituted with the count.\n   */\n\n  TYPE[TYPE[\"pound\"] = 7] = \"pound\";\n  /**\n   * XML-like tag\n   */\n\n  TYPE[TYPE[\"tag\"] = 8] = \"tag\";\n})(TYPE || (TYPE = {}));\n\nexport var SKELETON_TYPE;\n\n(function (SKELETON_TYPE) {\n  SKELETON_TYPE[SKELETON_TYPE[\"number\"] = 0] = \"number\";\n  SKELETON_TYPE[SKELETON_TYPE[\"dateTime\"] = 1] = \"dateTime\";\n})(SKELETON_TYPE || (SKELETON_TYPE = {}));\n/**\n * Type Guards\n */\n\n\nexport function isLiteralElement(el) {\n  return el.type === TYPE.literal;\n}\nexport function isArgumentElement(el) {\n  return el.type === TYPE.argument;\n}\nexport function isNumberElement(el) {\n  return el.type === TYPE.number;\n}\nexport function isDateElement(el) {\n  return el.type === TYPE.date;\n}\nexport function isTimeElement(el) {\n  return el.type === TYPE.time;\n}\nexport function isSelectElement(el) {\n  return el.type === TYPE.select;\n}\nexport function isPluralElement(el) {\n  return el.type === TYPE.plural;\n}\nexport function isPoundElement(el) {\n  return el.type === TYPE.pound;\n}\nexport function isTagElement(el) {\n  return el.type === TYPE.tag;\n}\nexport function isNumberSkeleton(el) {\n  return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.number);\n}\nexport function isDateTimeSkeleton(el) {\n  return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.dateTime);\n}\nexport function createLiteralElement(value) {\n  return {\n    type: TYPE.literal,\n    value: value\n  };\n}\nexport function createNumberElement(value, style) {\n  return {\n    type: TYPE.number,\n    value: value,\n    style: style\n  };\n}","// @generated from regex-gen.ts\nexport var SPACE_SEPARATOR_REGEX = /[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\nexport var WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/;","/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\n\nexport function parseDateTimeSkeleton(skeleton) {\n  var result = {};\n  skeleton.replace(DATE_TIME_REGEX, function (match) {\n    var len = match.length;\n\n    switch (match[0]) {\n      // Era\n      case 'G':\n        result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n        break;\n      // Year\n\n      case 'y':\n        result.year = len === 2 ? '2-digit' : 'numeric';\n        break;\n\n      case 'Y':\n      case 'u':\n      case 'U':\n      case 'r':\n        throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');\n      // Quarter\n\n      case 'q':\n      case 'Q':\n        throw new RangeError('`q/Q` (quarter) patterns are not supported');\n      // Month\n\n      case 'M':\n      case 'L':\n        result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n        break;\n      // Week\n\n      case 'w':\n      case 'W':\n        throw new RangeError('`w/W` (week) patterns are not supported');\n\n      case 'd':\n        result.day = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'D':\n      case 'F':\n      case 'g':\n        throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');\n      // Weekday\n\n      case 'E':\n        result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';\n        break;\n\n      case 'e':\n        if (len < 4) {\n          throw new RangeError('`e..eee` (weekday) patterns are not supported');\n        }\n\n        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n        break;\n\n      case 'c':\n        if (len < 4) {\n          throw new RangeError('`c..ccc` (weekday) patterns are not supported');\n        }\n\n        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n        break;\n      // Period\n\n      case 'a':\n        // AM, PM\n        result.hour12 = true;\n        break;\n\n      case 'b': // am, pm, noon, midnight\n\n      case 'B':\n        // flexible day periods\n        throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');\n      // Hour\n\n      case 'h':\n        result.hourCycle = 'h12';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'H':\n        result.hourCycle = 'h23';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'K':\n        result.hourCycle = 'h11';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'k':\n        result.hourCycle = 'h24';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'j':\n      case 'J':\n      case 'C':\n        throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n      // Minute\n\n      case 'm':\n        result.minute = ['numeric', '2-digit'][len - 1];\n        break;\n      // Second\n\n      case 's':\n        result.second = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'S':\n      case 'A':\n        throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');\n      // Zone\n\n      case 'z':\n        // 1..3, 4: specific non-location format\n        result.timeZoneName = len < 4 ? 'short' : 'long';\n        break;\n\n      case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n\n      case 'O': // 1, 4: miliseconds in day short, long\n\n      case 'v': // 1, 4: generic non-location format\n\n      case 'V': // 1, 2, 3, 4: time zone ID or city\n\n      case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n\n      case 'x':\n        // 1, 2, 3, 4: The ISO8601 varios formats\n        throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');\n    }\n\n    return '';\n  });\n  return result;\n}","// @generated from regex-gen.ts\nexport var WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/i;","import { __assign } from \"tslib\";\nimport { WHITE_SPACE_REGEX } from './regex.generated';\nexport function parseNumberSkeletonFromString(skeleton) {\n  if (skeleton.length === 0) {\n    throw new Error('Number skeleton cannot be empty');\n  } // Parse the skeleton\n\n\n  var stringTokens = skeleton.split(WHITE_SPACE_REGEX).filter(function (x) {\n    return x.length > 0;\n  });\n  var tokens = [];\n\n  for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {\n    var stringToken = stringTokens_1[_i];\n    var stemAndOptions = stringToken.split('/');\n\n    if (stemAndOptions.length === 0) {\n      throw new Error('Invalid number skeleton');\n    }\n\n    var stem = stemAndOptions[0],\n        options = stemAndOptions.slice(1);\n\n    for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {\n      var option = options_1[_a];\n\n      if (option.length === 0) {\n        throw new Error('Invalid number skeleton');\n      }\n    }\n\n    tokens.push({\n      stem: stem,\n      options: options\n    });\n  }\n\n  return tokens;\n}\n\nfunction icuUnitToEcma(unit) {\n  return unit.replace(/^(.*?)-/, '');\n}\n\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?$/g;\nvar INTEGER_WIDTH_REGEX = /(\\*)(0+)|(#+)(0+)|(0+)/g;\nvar CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;\n\nfunction parseSignificantPrecision(str) {\n  var result = {};\n  str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n    // @@@ case\n    if (typeof g2 !== 'string') {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length;\n    } // @@@+ case\n    else if (g2 === '+') {\n        result.minimumSignificantDigits = g1.length;\n      } // .### case\n      else if (g1[0] === '#') {\n          result.maximumSignificantDigits = g1.length;\n        } // .@@## or .@@@ case\n        else {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);\n          }\n\n    return '';\n  });\n  return result;\n}\n\nfunction parseSign(str) {\n  switch (str) {\n    case 'sign-auto':\n      return {\n        signDisplay: 'auto'\n      };\n\n    case 'sign-accounting':\n    case '()':\n      return {\n        currencySign: 'accounting'\n      };\n\n    case 'sign-always':\n    case '+!':\n      return {\n        signDisplay: 'always'\n      };\n\n    case 'sign-accounting-always':\n    case '()!':\n      return {\n        signDisplay: 'always',\n        currencySign: 'accounting'\n      };\n\n    case 'sign-except-zero':\n    case '+?':\n      return {\n        signDisplay: 'exceptZero'\n      };\n\n    case 'sign-accounting-except-zero':\n    case '()?':\n      return {\n        signDisplay: 'exceptZero',\n        currencySign: 'accounting'\n      };\n\n    case 'sign-never':\n    case '+_':\n      return {\n        signDisplay: 'never'\n      };\n  }\n}\n\nfunction parseConciseScientificAndEngineeringStem(stem) {\n  // Engineering\n  var result;\n\n  if (stem[0] === 'E' && stem[1] === 'E') {\n    result = {\n      notation: 'engineering'\n    };\n    stem = stem.slice(2);\n  } else if (stem[0] === 'E') {\n    result = {\n      notation: 'scientific'\n    };\n    stem = stem.slice(1);\n  }\n\n  if (result) {\n    var signDisplay = stem.slice(0, 2);\n\n    if (signDisplay === '+!') {\n      result.signDisplay = 'always';\n      stem = stem.slice(2);\n    } else if (signDisplay === '+?') {\n      result.signDisplay = 'exceptZero';\n      stem = stem.slice(2);\n    }\n\n    if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {\n      throw new Error('Malformed concise eng/scientific notation');\n    }\n\n    result.minimumIntegerDigits = stem.length;\n  }\n\n  return result;\n}\n\nfunction parseNotationOptions(opt) {\n  var result = {};\n  var signOpts = parseSign(opt);\n\n  if (signOpts) {\n    return signOpts;\n  }\n\n  return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */\n\n\nexport function parseNumberSkeleton(tokens) {\n  var result = {};\n\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n\n    switch (token.stem) {\n      case 'percent':\n      case '%':\n        result.style = 'percent';\n        continue;\n\n      case '%x100':\n        result.style = 'percent';\n        result.scale = 100;\n        continue;\n\n      case 'currency':\n        result.style = 'currency';\n        result.currency = token.options[0];\n        continue;\n\n      case 'group-off':\n      case ',_':\n        result.useGrouping = false;\n        continue;\n\n      case 'precision-integer':\n      case '.':\n        result.maximumFractionDigits = 0;\n        continue;\n\n      case 'measure-unit':\n      case 'unit':\n        result.style = 'unit';\n        result.unit = icuUnitToEcma(token.options[0]);\n        continue;\n\n      case 'compact-short':\n      case 'K':\n        result.notation = 'compact';\n        result.compactDisplay = 'short';\n        continue;\n\n      case 'compact-long':\n      case 'KK':\n        result.notation = 'compact';\n        result.compactDisplay = 'long';\n        continue;\n\n      case 'scientific':\n        result = __assign(__assign(__assign({}, result), {\n          notation: 'scientific'\n        }), token.options.reduce(function (all, opt) {\n          return __assign(__assign({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n\n      case 'engineering':\n        result = __assign(__assign(__assign({}, result), {\n          notation: 'engineering'\n        }), token.options.reduce(function (all, opt) {\n          return __assign(__assign({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n\n      case 'notation-simple':\n        result.notation = 'standard';\n        continue;\n      // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n\n      case 'unit-width-narrow':\n        result.currencyDisplay = 'narrowSymbol';\n        result.unitDisplay = 'narrow';\n        continue;\n\n      case 'unit-width-short':\n        result.currencyDisplay = 'code';\n        result.unitDisplay = 'short';\n        continue;\n\n      case 'unit-width-full-name':\n        result.currencyDisplay = 'name';\n        result.unitDisplay = 'long';\n        continue;\n\n      case 'unit-width-iso-code':\n        result.currencyDisplay = 'symbol';\n        continue;\n\n      case 'scale':\n        result.scale = parseFloat(token.options[0]);\n        continue;\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n\n      case 'integer-width':\n        if (token.options.length > 1) {\n          throw new RangeError('integer-width stems only accept a single optional option');\n        }\n\n        token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {\n          if (g1) {\n            result.minimumIntegerDigits = g2.length;\n          } else if (g3 && g4) {\n            throw new Error('We currently do not support maximum integer digits');\n          } else if (g5) {\n            throw new Error('We currently do not support exact integer digits');\n          }\n\n          return '';\n        });\n        continue;\n    } // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n\n\n    if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {\n      result.minimumIntegerDigits = token.stem.length;\n      continue;\n    }\n\n    if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n      // Precision\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision\n      // precision-integer case\n      if (token.options.length > 1) {\n        throw new RangeError('Fraction-precision stems only accept a single optional option');\n      }\n\n      token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {\n        // .000* case (before ICU67 it was .000+)\n        if (g2 === '*') {\n          result.minimumFractionDigits = g1.length;\n        } // .### case\n        else if (g3 && g3[0] === '#') {\n            result.maximumFractionDigits = g3.length;\n          } // .00## case\n          else if (g4 && g5) {\n              result.minimumFractionDigits = g4.length;\n              result.maximumFractionDigits = g4.length + g5.length;\n            } else {\n              result.minimumFractionDigits = g1.length;\n              result.maximumFractionDigits = g1.length;\n            }\n\n        return '';\n      });\n\n      if (token.options.length) {\n        result = __assign(__assign({}, result), parseSignificantPrecision(token.options[0]));\n      }\n\n      continue;\n    } // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision\n\n\n    if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n      result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));\n      continue;\n    }\n\n    var signOpts = parseSign(token.stem);\n\n    if (signOpts) {\n      result = __assign(__assign({}, result), signOpts);\n    }\n\n    var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);\n\n    if (conciseScientificAndEngineeringOpts) {\n      result = __assign(__assign({}, result), conciseScientificAndEngineeringOpts);\n    }\n  }\n\n  return result;\n}","var _a;\n\nimport { __assign } from \"tslib\";\nimport { ErrorKind } from './error';\nimport { SKELETON_TYPE, TYPE } from './types';\nimport { SPACE_SEPARATOR_REGEX } from './regex.generated';\nimport { parseNumberSkeleton, parseNumberSkeletonFromString, parseDateTimeSkeleton } from '@formatjs/icu-skeleton-parser';\nvar SPACE_SEPARATOR_START_REGEX = new RegExp(\"^\" + SPACE_SEPARATOR_REGEX.source + \"*\");\nvar SPACE_SEPARATOR_END_REGEX = new RegExp(SPACE_SEPARATOR_REGEX.source + \"*$\");\n\nfunction createLocation(start, end) {\n  return {\n    start: start,\n    end: end\n  };\n} // #region Ponyfills\n// Consolidate these variables up top for easier toggling during debugging\n\n\nvar hasNativeStartsWith = !!String.prototype.startsWith;\nvar hasNativeFromCodePoint = !!String.fromCodePoint;\nvar hasNativeFromEntries = !!Object.fromEntries;\nvar hasNativeCodePointAt = !!String.prototype.codePointAt;\nvar hasTrimStart = !!String.prototype.trimStart;\nvar hasTrimEnd = !!String.prototype.trimEnd;\nvar hasNativeIsSafeInteger = !!Number.isSafeInteger;\nvar isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function (n) {\n  return typeof n === 'number' && isFinite(n) && Math.floor(n) === n && Math.abs(n) <= 0x1fffffffffffff;\n}; // IE11 does not support y and u.\n\nvar REGEX_SUPPORTS_U_AND_Y = true;\n\ntry {\n  var re = RE('([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)', 'yu');\n  /**\n   * legacy Edge or Xbox One browser\n   * Unicode flag support: supported\n   * Pattern_Syntax support: not supported\n   * See https://github.com/formatjs/formatjs/issues/2822\n   */\n\n  REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec('a')) === null || _a === void 0 ? void 0 : _a[0]) === 'a';\n} catch (_) {\n  REGEX_SUPPORTS_U_AND_Y = false;\n}\n\nvar startsWith = hasNativeStartsWith ? // Native\nfunction startsWith(s, search, position) {\n  return s.startsWith(search, position);\n} : // For IE11\nfunction startsWith(s, search, position) {\n  return s.slice(position, position + search.length) === search;\n};\nvar fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint : // IE11\nfunction fromCodePoint() {\n  var codePoints = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    codePoints[_i] = arguments[_i];\n  }\n\n  var elements = '';\n  var length = codePoints.length;\n  var i = 0;\n  var code;\n\n  while (length > i) {\n    code = codePoints[i++];\n    if (code > 0x10ffff) throw RangeError(code + ' is not a valid code point');\n    elements += code < 0x10000 ? String.fromCharCode(code) : String.fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00);\n  }\n\n  return elements;\n};\nvar fromEntries = // native\nhasNativeFromEntries ? Object.fromEntries : // Ponyfill\nfunction fromEntries(entries) {\n  var obj = {};\n\n  for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n    var _a = entries_1[_i],\n        k = _a[0],\n        v = _a[1];\n    obj[k] = v;\n  }\n\n  return obj;\n};\nvar codePointAt = hasNativeCodePointAt ? // Native\nfunction codePointAt(s, index) {\n  return s.codePointAt(index);\n} : // IE 11\nfunction codePointAt(s, index) {\n  var size = s.length;\n\n  if (index < 0 || index >= size) {\n    return undefined;\n  }\n\n  var first = s.charCodeAt(index);\n  var second;\n  return first < 0xd800 || first > 0xdbff || index + 1 === size || (second = s.charCodeAt(index + 1)) < 0xdc00 || second > 0xdfff ? first : (first - 0xd800 << 10) + (second - 0xdc00) + 0x10000;\n};\nvar trimStart = hasTrimStart ? // Native\nfunction trimStart(s) {\n  return s.trimStart();\n} : // Ponyfill\nfunction trimStart(s) {\n  return s.replace(SPACE_SEPARATOR_START_REGEX, '');\n};\nvar trimEnd = hasTrimEnd ? // Native\nfunction trimEnd(s) {\n  return s.trimEnd();\n} : // Ponyfill\nfunction trimEnd(s) {\n  return s.replace(SPACE_SEPARATOR_END_REGEX, '');\n}; // Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.\n\nfunction RE(s, flag) {\n  return new RegExp(s, flag);\n} // #endregion\n\n\nvar matchIdentifierAtIndex;\n\nif (REGEX_SUPPORTS_U_AND_Y) {\n  // Native\n  var IDENTIFIER_PREFIX_RE_1 = RE('([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)', 'yu');\n\n  matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n    var _a;\n\n    IDENTIFIER_PREFIX_RE_1.lastIndex = index;\n    var match = IDENTIFIER_PREFIX_RE_1.exec(s);\n    return (_a = match[1]) !== null && _a !== void 0 ? _a : '';\n  };\n} else {\n  // IE11\n  matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n    var match = [];\n\n    while (true) {\n      var c = codePointAt(s, index);\n\n      if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {\n        break;\n      }\n\n      match.push(c);\n      index += c >= 0x10000 ? 2 : 1;\n    }\n\n    return fromCodePoint.apply(void 0, match);\n  };\n}\n\nvar Parser =\n/** @class */\nfunction () {\n  function Parser(message, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.message = message;\n    this.position = {\n      offset: 0,\n      line: 1,\n      column: 1\n    };\n    this.ignoreTag = !!options.ignoreTag;\n    this.requiresOtherClause = !!options.requiresOtherClause;\n    this.shouldParseSkeletons = !!options.shouldParseSkeletons;\n  }\n\n  Parser.prototype.parse = function () {\n    if (this.offset() !== 0) {\n      throw Error('parser can only be used once');\n    }\n\n    return this.parseMessage(0, '', false);\n  };\n\n  Parser.prototype.parseMessage = function (nestingLevel, parentArgType, expectingCloseTag) {\n    var elements = [];\n\n    while (!this.isEOF()) {\n      var char = this.char();\n\n      if (char === 123\n      /* `{` */\n      ) {\n          var result = this.parseArgument(nestingLevel, expectingCloseTag);\n\n          if (result.err) {\n            return result;\n          }\n\n          elements.push(result.val);\n        } else if (char === 125\n      /* `}` */\n      && nestingLevel > 0) {\n        break;\n      } else if (char === 35\n      /* `#` */\n      && (parentArgType === 'plural' || parentArgType === 'selectordinal')) {\n        var position = this.clonePosition();\n        this.bump();\n        elements.push({\n          type: TYPE.pound,\n          location: createLocation(position, this.clonePosition())\n        });\n      } else if (char === 60\n      /* `<` */\n      && !this.ignoreTag && this.peek() === 47 // char code for '/'\n      ) {\n          if (expectingCloseTag) {\n            break;\n          } else {\n            return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));\n          }\n        } else if (char === 60\n      /* `<` */\n      && !this.ignoreTag && _isAlpha(this.peek() || 0)) {\n        var result = this.parseTag(nestingLevel, parentArgType);\n\n        if (result.err) {\n          return result;\n        }\n\n        elements.push(result.val);\n      } else {\n        var result = this.parseLiteral(nestingLevel, parentArgType);\n\n        if (result.err) {\n          return result;\n        }\n\n        elements.push(result.val);\n      }\n    }\n\n    return {\n      val: elements,\n      err: null\n    };\n  };\n  /**\n   * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the\n   * [custom element name][] except that a dash is NOT always mandatory and uppercase letters\n   * are accepted:\n   *\n   * ```\n   * tag ::= \"<\" tagName (whitespace)* \"/>\" | \"<\" tagName (whitespace)* \">\" message \"</\" tagName (whitespace)* \">\"\n   * tagName ::= [a-z] (PENChar)*\n   * PENChar ::=\n   *     \"-\" | \".\" | [0-9] | \"_\" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |\n   *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |\n   *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n   * ```\n   *\n   * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n   * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do\n   * since other tag-based engines like React allow it\n   */\n\n\n  Parser.prototype.parseTag = function (nestingLevel, parentArgType) {\n    var startPosition = this.clonePosition();\n    this.bump(); // `<`\n\n    var tagName = this.parseTagName();\n    this.bumpSpace();\n\n    if (this.bumpIf('/>')) {\n      // Self closing tag\n      return {\n        val: {\n          type: TYPE.literal,\n          value: \"<\" + tagName + \"/>\",\n          location: createLocation(startPosition, this.clonePosition())\n        },\n        err: null\n      };\n    } else if (this.bumpIf('>')) {\n      var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);\n\n      if (childrenResult.err) {\n        return childrenResult;\n      }\n\n      var children = childrenResult.val; // Expecting a close tag\n\n      var endTagStartPosition = this.clonePosition();\n\n      if (this.bumpIf('</')) {\n        if (this.isEOF() || !_isAlpha(this.char())) {\n          return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n        }\n\n        var closingTagNameStartPosition = this.clonePosition();\n        var closingTagName = this.parseTagName();\n\n        if (tagName !== closingTagName) {\n          return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));\n        }\n\n        this.bumpSpace();\n\n        if (!this.bumpIf('>')) {\n          return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n        }\n\n        return {\n          val: {\n            type: TYPE.tag,\n            value: tagName,\n            children: children,\n            location: createLocation(startPosition, this.clonePosition())\n          },\n          err: null\n        };\n      } else {\n        return this.error(ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));\n      }\n    } else {\n      return this.error(ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));\n    }\n  };\n  /**\n   * This method assumes that the caller has peeked ahead for the first tag character.\n   */\n\n\n  Parser.prototype.parseTagName = function () {\n    var startOffset = this.offset();\n    this.bump(); // the first tag name character\n\n    while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {\n      this.bump();\n    }\n\n    return this.message.slice(startOffset, this.offset());\n  };\n\n  Parser.prototype.parseLiteral = function (nestingLevel, parentArgType) {\n    var start = this.clonePosition();\n    var value = '';\n\n    while (true) {\n      var parseQuoteResult = this.tryParseQuote(parentArgType);\n\n      if (parseQuoteResult) {\n        value += parseQuoteResult;\n        continue;\n      }\n\n      var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);\n\n      if (parseUnquotedResult) {\n        value += parseUnquotedResult;\n        continue;\n      }\n\n      var parseLeftAngleResult = this.tryParseLeftAngleBracket();\n\n      if (parseLeftAngleResult) {\n        value += parseLeftAngleResult;\n        continue;\n      }\n\n      break;\n    }\n\n    var location = createLocation(start, this.clonePosition());\n    return {\n      val: {\n        type: TYPE.literal,\n        value: value,\n        location: location\n      },\n      err: null\n    };\n  };\n\n  Parser.prototype.tryParseLeftAngleBracket = function () {\n    if (!this.isEOF() && this.char() === 60\n    /* `<` */\n    && (this.ignoreTag || // If at the opening tag or closing tag position, bail.\n    !_isAlphaOrSlash(this.peek() || 0))) {\n      this.bump(); // `<`\n\n      return '<';\n    }\n\n    return null;\n  };\n  /**\n   * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes\n   * a character that requires quoting (that is, \"only where needed\"), and works the same in\n   * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.\n   */\n\n\n  Parser.prototype.tryParseQuote = function (parentArgType) {\n    if (this.isEOF() || this.char() !== 39\n    /* `'` */\n    ) {\n        return null;\n      } // Parse escaped char following the apostrophe, or early return if there is no escaped char.\n    // Check if is valid escaped character\n\n\n    switch (this.peek()) {\n      case 39\n      /* `'` */\n      :\n        // double quote, should return as a single quote.\n        this.bump();\n        this.bump();\n        return \"'\";\n      // '{', '<', '>', '}'\n\n      case 123:\n      case 60:\n      case 62:\n      case 125:\n        break;\n\n      case 35:\n        // '#'\n        if (parentArgType === 'plural' || parentArgType === 'selectordinal') {\n          break;\n        }\n\n        return null;\n\n      default:\n        return null;\n    }\n\n    this.bump(); // apostrophe\n\n    var codePoints = [this.char()]; // escaped char\n\n    this.bump(); // read chars until the optional closing apostrophe is found\n\n    while (!this.isEOF()) {\n      var ch = this.char();\n\n      if (ch === 39\n      /* `'` */\n      ) {\n          if (this.peek() === 39\n          /* `'` */\n          ) {\n              codePoints.push(39); // Bump one more time because we need to skip 2 characters.\n\n              this.bump();\n            } else {\n            // Optional closing apostrophe.\n            this.bump();\n            break;\n          }\n        } else {\n        codePoints.push(ch);\n      }\n\n      this.bump();\n    }\n\n    return fromCodePoint.apply(void 0, codePoints);\n  };\n\n  Parser.prototype.tryParseUnquoted = function (nestingLevel, parentArgType) {\n    if (this.isEOF()) {\n      return null;\n    }\n\n    var ch = this.char();\n\n    if (ch === 60\n    /* `<` */\n    || ch === 123\n    /* `{` */\n    || ch === 35\n    /* `#` */\n    && (parentArgType === 'plural' || parentArgType === 'selectordinal') || ch === 125\n    /* `}` */\n    && nestingLevel > 0) {\n      return null;\n    } else {\n      this.bump();\n      return fromCodePoint(ch);\n    }\n  };\n\n  Parser.prototype.parseArgument = function (nestingLevel, expectingCloseTag) {\n    var openingBracePosition = this.clonePosition();\n    this.bump(); // `{`\n\n    this.bumpSpace();\n\n    if (this.isEOF()) {\n      return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n    }\n\n    if (this.char() === 125\n    /* `}` */\n    ) {\n        this.bump();\n        return this.error(ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n      } // argument name\n\n\n    var value = this.parseIdentifierIfPossible().value;\n\n    if (!value) {\n      return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n    }\n\n    this.bumpSpace();\n\n    if (this.isEOF()) {\n      return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n    }\n\n    switch (this.char()) {\n      // Simple argument: `{name}`\n      case 125\n      /* `}` */\n      :\n        {\n          this.bump(); // `}`\n\n          return {\n            val: {\n              type: TYPE.argument,\n              // value does not include the opening and closing braces.\n              value: value,\n              location: createLocation(openingBracePosition, this.clonePosition())\n            },\n            err: null\n          };\n        }\n      // Argument with options: `{name, format, ...}`\n\n      case 44\n      /* `,` */\n      :\n        {\n          this.bump(); // `,`\n\n          this.bumpSpace();\n\n          if (this.isEOF()) {\n            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n          }\n\n          return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);\n        }\n\n      default:\n        return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n    }\n  };\n  /**\n   * Advance the parser until the end of the identifier, if it is currently on\n   * an identifier character. Return an empty string otherwise.\n   */\n\n\n  Parser.prototype.parseIdentifierIfPossible = function () {\n    var startingPosition = this.clonePosition();\n    var startOffset = this.offset();\n    var value = matchIdentifierAtIndex(this.message, startOffset);\n    var endOffset = startOffset + value.length;\n    this.bumpTo(endOffset);\n    var endPosition = this.clonePosition();\n    var location = createLocation(startingPosition, endPosition);\n    return {\n      value: value,\n      location: location\n    };\n  };\n\n  Parser.prototype.parseArgumentOptions = function (nestingLevel, expectingCloseTag, value, openingBracePosition) {\n    var _a; // Parse this range:\n    // {name, type, style}\n    //        ^---^\n\n\n    var typeStartPosition = this.clonePosition();\n    var argType = this.parseIdentifierIfPossible().value;\n    var typeEndPosition = this.clonePosition();\n\n    switch (argType) {\n      case '':\n        // Expecting a style string number, date, time, plural, selectordinal, or select.\n        return this.error(ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n\n      case 'number':\n      case 'date':\n      case 'time':\n        {\n          // Parse this range:\n          // {name, number, style}\n          //              ^-------^\n          this.bumpSpace();\n          var styleAndLocation = null;\n\n          if (this.bumpIf(',')) {\n            this.bumpSpace();\n            var styleStartPosition = this.clonePosition();\n            var result = this.parseSimpleArgStyleIfPossible();\n\n            if (result.err) {\n              return result;\n            }\n\n            var style = trimEnd(result.val);\n\n            if (style.length === 0) {\n              return this.error(ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));\n            }\n\n            var styleLocation = createLocation(styleStartPosition, this.clonePosition());\n            styleAndLocation = {\n              style: style,\n              styleLocation: styleLocation\n            };\n          }\n\n          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n\n          if (argCloseResult.err) {\n            return argCloseResult;\n          }\n\n          var location_1 = createLocation(openingBracePosition, this.clonePosition()); // Extract style or skeleton\n\n          if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, '::', 0)) {\n            // Skeleton starts with `::`.\n            var skeleton = trimStart(styleAndLocation.style.slice(2));\n\n            if (argType === 'number') {\n              var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);\n\n              if (result.err) {\n                return result;\n              }\n\n              return {\n                val: {\n                  type: TYPE.number,\n                  value: value,\n                  location: location_1,\n                  style: result.val\n                },\n                err: null\n              };\n            } else {\n              if (skeleton.length === 0) {\n                return this.error(ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);\n              }\n\n              var style = {\n                type: SKELETON_TYPE.dateTime,\n                pattern: skeleton,\n                location: styleAndLocation.styleLocation,\n                parsedOptions: this.shouldParseSkeletons ? parseDateTimeSkeleton(skeleton) : {}\n              };\n              var type = argType === 'date' ? TYPE.date : TYPE.time;\n              return {\n                val: {\n                  type: type,\n                  value: value,\n                  location: location_1,\n                  style: style\n                },\n                err: null\n              };\n            }\n          } // Regular style or no style.\n\n\n          return {\n            val: {\n              type: argType === 'number' ? TYPE.number : argType === 'date' ? TYPE.date : TYPE.time,\n              value: value,\n              location: location_1,\n              style: (_a = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a !== void 0 ? _a : null\n            },\n            err: null\n          };\n        }\n\n      case 'plural':\n      case 'selectordinal':\n      case 'select':\n        {\n          // Parse this range:\n          // {name, plural, options}\n          //              ^---------^\n          var typeEndPosition_1 = this.clonePosition();\n          this.bumpSpace();\n\n          if (!this.bumpIf(',')) {\n            return this.error(ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, __assign({}, typeEndPosition_1)));\n          }\n\n          this.bumpSpace(); // Parse offset:\n          // {name, plural, offset:1, options}\n          //                ^-----^\n          //\n          // or the first option:\n          //\n          // {name, plural, one {...} other {...}}\n          //                ^--^\n\n          var identifierAndLocation = this.parseIdentifierIfPossible();\n          var pluralOffset = 0;\n\n          if (argType !== 'select' && identifierAndLocation.value === 'offset') {\n            if (!this.bumpIf(':')) {\n              return this.error(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));\n            }\n\n            this.bumpSpace();\n            var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);\n\n            if (result.err) {\n              return result;\n            } // Parse another identifier for option parsing\n\n\n            this.bumpSpace();\n            identifierAndLocation = this.parseIdentifierIfPossible();\n            pluralOffset = result.val;\n          }\n\n          var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);\n\n          if (optionsResult.err) {\n            return optionsResult;\n          }\n\n          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n\n          if (argCloseResult.err) {\n            return argCloseResult;\n          }\n\n          var location_2 = createLocation(openingBracePosition, this.clonePosition());\n\n          if (argType === 'select') {\n            return {\n              val: {\n                type: TYPE.select,\n                value: value,\n                options: fromEntries(optionsResult.val),\n                location: location_2\n              },\n              err: null\n            };\n          } else {\n            return {\n              val: {\n                type: TYPE.plural,\n                value: value,\n                options: fromEntries(optionsResult.val),\n                offset: pluralOffset,\n                pluralType: argType === 'plural' ? 'cardinal' : 'ordinal',\n                location: location_2\n              },\n              err: null\n            };\n          }\n        }\n\n      default:\n        return this.error(ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n    }\n  };\n\n  Parser.prototype.tryParseArgumentClose = function (openingBracePosition) {\n    // Parse: {value, number, ::currency/GBP }\n    //\n    if (this.isEOF() || this.char() !== 125\n    /* `}` */\n    ) {\n        return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n      }\n\n    this.bump(); // `}`\n\n    return {\n      val: true,\n      err: null\n    };\n  };\n  /**\n   * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659\n   */\n\n\n  Parser.prototype.parseSimpleArgStyleIfPossible = function () {\n    var nestedBraces = 0;\n    var startPosition = this.clonePosition();\n\n    while (!this.isEOF()) {\n      var ch = this.char();\n\n      switch (ch) {\n        case 39\n        /* `'` */\n        :\n          {\n            // Treat apostrophe as quoting but include it in the style part.\n            // Find the end of the quoted literal text.\n            this.bump();\n            var apostrophePosition = this.clonePosition();\n\n            if (!this.bumpUntil(\"'\")) {\n              return this.error(ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));\n            }\n\n            this.bump();\n            break;\n          }\n\n        case 123\n        /* `{` */\n        :\n          {\n            nestedBraces += 1;\n            this.bump();\n            break;\n          }\n\n        case 125\n        /* `}` */\n        :\n          {\n            if (nestedBraces > 0) {\n              nestedBraces -= 1;\n            } else {\n              return {\n                val: this.message.slice(startPosition.offset, this.offset()),\n                err: null\n              };\n            }\n\n            break;\n          }\n\n        default:\n          this.bump();\n          break;\n      }\n    }\n\n    return {\n      val: this.message.slice(startPosition.offset, this.offset()),\n      err: null\n    };\n  };\n\n  Parser.prototype.parseNumberSkeletonFromString = function (skeleton, location) {\n    var tokens = [];\n\n    try {\n      tokens = parseNumberSkeletonFromString(skeleton);\n    } catch (e) {\n      return this.error(ErrorKind.INVALID_NUMBER_SKELETON, location);\n    }\n\n    return {\n      val: {\n        type: SKELETON_TYPE.number,\n        tokens: tokens,\n        location: location,\n        parsedOptions: this.shouldParseSkeletons ? parseNumberSkeleton(tokens) : {}\n      },\n      err: null\n    };\n  };\n  /**\n   * @param nesting_level The current nesting level of messages.\n   *     This can be positive when parsing message fragment in select or plural argument options.\n   * @param parent_arg_type The parent argument's type.\n   * @param parsed_first_identifier If provided, this is the first identifier-like selector of\n   *     the argument. It is a by-product of a previous parsing attempt.\n   * @param expecting_close_tag If true, this message is directly or indirectly nested inside\n   *     between a pair of opening and closing tags. The nested message will not parse beyond\n   *     the closing tag boundary.\n   */\n\n\n  Parser.prototype.tryParsePluralOrSelectOptions = function (nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {\n    var _a;\n\n    var hasOtherClause = false;\n    var options = [];\n    var parsedSelectors = new Set();\n    var selector = parsedFirstIdentifier.value,\n        selectorLocation = parsedFirstIdentifier.location; // Parse:\n    // one {one apple}\n    // ^--^\n\n    while (true) {\n      if (selector.length === 0) {\n        var startPosition = this.clonePosition();\n\n        if (parentArgType !== 'select' && this.bumpIf('=')) {\n          // Try parse `={number}` selector\n          var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);\n\n          if (result.err) {\n            return result;\n          }\n\n          selectorLocation = createLocation(startPosition, this.clonePosition());\n          selector = this.message.slice(startPosition.offset, this.offset());\n        } else {\n          break;\n        }\n      } // Duplicate selector clauses\n\n\n      if (parsedSelectors.has(selector)) {\n        return this.error(parentArgType === 'select' ? ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);\n      }\n\n      if (selector === 'other') {\n        hasOtherClause = true;\n      } // Parse:\n      // one {one apple}\n      //     ^----------^\n\n\n      this.bumpSpace();\n      var openingBracePosition = this.clonePosition();\n\n      if (!this.bumpIf('{')) {\n        return this.error(parentArgType === 'select' ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));\n      }\n\n      var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);\n\n      if (fragmentResult.err) {\n        return fragmentResult;\n      }\n\n      var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n\n      if (argCloseResult.err) {\n        return argCloseResult;\n      }\n\n      options.push([selector, {\n        value: fragmentResult.val,\n        location: createLocation(openingBracePosition, this.clonePosition())\n      }]); // Keep track of the existing selectors\n\n      parsedSelectors.add(selector); // Prep next selector clause.\n\n      this.bumpSpace();\n      _a = this.parseIdentifierIfPossible(), selector = _a.value, selectorLocation = _a.location;\n    }\n\n    if (options.length === 0) {\n      return this.error(parentArgType === 'select' ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));\n    }\n\n    if (this.requiresOtherClause && !hasOtherClause) {\n      return this.error(ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));\n    }\n\n    return {\n      val: options,\n      err: null\n    };\n  };\n\n  Parser.prototype.tryParseDecimalInteger = function (expectNumberError, invalidNumberError) {\n    var sign = 1;\n    var startingPosition = this.clonePosition();\n\n    if (this.bumpIf('+')) {} else if (this.bumpIf('-')) {\n      sign = -1;\n    }\n\n    var hasDigits = false;\n    var decimal = 0;\n\n    while (!this.isEOF()) {\n      var ch = this.char();\n\n      if (ch >= 48\n      /* `0` */\n      && ch <= 57\n      /* `9` */\n      ) {\n          hasDigits = true;\n          decimal = decimal * 10 + (ch - 48);\n          this.bump();\n        } else {\n        break;\n      }\n    }\n\n    var location = createLocation(startingPosition, this.clonePosition());\n\n    if (!hasDigits) {\n      return this.error(expectNumberError, location);\n    }\n\n    decimal *= sign;\n\n    if (!isSafeInteger(decimal)) {\n      return this.error(invalidNumberError, location);\n    }\n\n    return {\n      val: decimal,\n      err: null\n    };\n  };\n\n  Parser.prototype.offset = function () {\n    return this.position.offset;\n  };\n\n  Parser.prototype.isEOF = function () {\n    return this.offset() === this.message.length;\n  };\n\n  Parser.prototype.clonePosition = function () {\n    // This is much faster than `Object.assign` or spread.\n    return {\n      offset: this.position.offset,\n      line: this.position.line,\n      column: this.position.column\n    };\n  };\n  /**\n   * Return the code point at the current position of the parser.\n   * Throws if the index is out of bound.\n   */\n\n\n  Parser.prototype.char = function () {\n    var offset = this.position.offset;\n\n    if (offset >= this.message.length) {\n      throw Error('out of bound');\n    }\n\n    var code = codePointAt(this.message, offset);\n\n    if (code === undefined) {\n      throw Error(\"Offset \" + offset + \" is at invalid UTF-16 code unit boundary\");\n    }\n\n    return code;\n  };\n\n  Parser.prototype.error = function (kind, location) {\n    return {\n      val: null,\n      err: {\n        kind: kind,\n        message: this.message,\n        location: location\n      }\n    };\n  };\n  /** Bump the parser to the next UTF-16 code unit. */\n\n\n  Parser.prototype.bump = function () {\n    if (this.isEOF()) {\n      return;\n    }\n\n    var code = this.char();\n\n    if (code === 10\n    /* '\\n' */\n    ) {\n        this.position.line += 1;\n        this.position.column = 1;\n        this.position.offset += 1;\n      } else {\n      this.position.column += 1; // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.\n\n      this.position.offset += code < 0x10000 ? 1 : 2;\n    }\n  };\n  /**\n   * If the substring starting at the current position of the parser has\n   * the given prefix, then bump the parser to the character immediately\n   * following the prefix and return true. Otherwise, don't bump the parser\n   * and return false.\n   */\n\n\n  Parser.prototype.bumpIf = function (prefix) {\n    if (startsWith(this.message, prefix, this.offset())) {\n      for (var i = 0; i < prefix.length; i++) {\n        this.bump();\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Bump the parser until the pattern character is found and return `true`.\n   * Otherwise bump to the end of the file and return `false`.\n   */\n\n\n  Parser.prototype.bumpUntil = function (pattern) {\n    var currentOffset = this.offset();\n    var index = this.message.indexOf(pattern, currentOffset);\n\n    if (index >= 0) {\n      this.bumpTo(index);\n      return true;\n    } else {\n      this.bumpTo(this.message.length);\n      return false;\n    }\n  };\n  /**\n   * Bump the parser to the target offset.\n   * If target offset is beyond the end of the input, bump the parser to the end of the input.\n   */\n\n\n  Parser.prototype.bumpTo = function (targetOffset) {\n    if (this.offset() > targetOffset) {\n      throw Error(\"targetOffset \" + targetOffset + \" must be greater than or equal to the current offset \" + this.offset());\n    }\n\n    targetOffset = Math.min(targetOffset, this.message.length);\n\n    while (true) {\n      var offset = this.offset();\n\n      if (offset === targetOffset) {\n        break;\n      }\n\n      if (offset > targetOffset) {\n        throw Error(\"targetOffset \" + targetOffset + \" is at invalid UTF-16 code unit boundary\");\n      }\n\n      this.bump();\n\n      if (this.isEOF()) {\n        break;\n      }\n    }\n  };\n  /** advance the parser through all whitespace to the next non-whitespace code unit. */\n\n\n  Parser.prototype.bumpSpace = function () {\n    while (!this.isEOF() && _isWhiteSpace(this.char())) {\n      this.bump();\n    }\n  };\n  /**\n   * Peek at the *next* Unicode codepoint in the input without advancing the parser.\n   * If the input has been exhausted, then this returns null.\n   */\n\n\n  Parser.prototype.peek = function () {\n    if (this.isEOF()) {\n      return null;\n    }\n\n    var code = this.char();\n    var offset = this.offset();\n    var nextCode = this.message.charCodeAt(offset + (code >= 0x10000 ? 2 : 1));\n    return nextCode !== null && nextCode !== void 0 ? nextCode : null;\n  };\n\n  return Parser;\n}();\n\nexport { Parser };\n/**\n * This check if codepoint is alphabet (lower & uppercase)\n * @param codepoint\n * @returns\n */\n\nfunction _isAlpha(codepoint) {\n  return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;\n}\n\nfunction _isAlphaOrSlash(codepoint) {\n  return _isAlpha(codepoint) || codepoint === 47;\n  /* '/' */\n}\n/** See `parseTag` function docs. */\n\n\nfunction _isPotentialElementNameChar(c) {\n  return c === 45\n  /* '-' */\n  || c === 46\n  /* '.' */\n  || c >= 48 && c <= 57\n  /* 0..9 */\n  || c === 95\n  /* '_' */\n  || c >= 97 && c <= 122\n  /** a..z */\n  || c >= 65 && c <= 90\n  /* A..Z */\n  || c == 0xb7 || c >= 0xc0 && c <= 0xd6 || c >= 0xd8 && c <= 0xf6 || c >= 0xf8 && c <= 0x37d || c >= 0x37f && c <= 0x1fff || c >= 0x200c && c <= 0x200d || c >= 0x203f && c <= 0x2040 || c >= 0x2070 && c <= 0x218f || c >= 0x2c00 && c <= 0x2fef || c >= 0x3001 && c <= 0xd7ff || c >= 0xf900 && c <= 0xfdcf || c >= 0xfdf0 && c <= 0xfffd || c >= 0x10000 && c <= 0xeffff;\n}\n/**\n * Code point equivalent of regex `\\p{White_Space}`.\n * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */\n\n\nfunction _isWhiteSpace(c) {\n  return c >= 0x0009 && c <= 0x000d || c === 0x0020 || c === 0x0085 || c >= 0x200e && c <= 0x200f || c === 0x2028 || c === 0x2029;\n}\n/**\n * Code point equivalent of regex `\\p{Pattern_Syntax}`.\n * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */\n\n\nfunction _isPatternSyntax(c) {\n  return c >= 0x0021 && c <= 0x0023 || c === 0x0024 || c >= 0x0025 && c <= 0x0027 || c === 0x0028 || c === 0x0029 || c === 0x002a || c === 0x002b || c === 0x002c || c === 0x002d || c >= 0x002e && c <= 0x002f || c >= 0x003a && c <= 0x003b || c >= 0x003c && c <= 0x003e || c >= 0x003f && c <= 0x0040 || c === 0x005b || c === 0x005c || c === 0x005d || c === 0x005e || c === 0x0060 || c === 0x007b || c === 0x007c || c === 0x007d || c === 0x007e || c === 0x00a1 || c >= 0x00a2 && c <= 0x00a5 || c === 0x00a6 || c === 0x00a7 || c === 0x00a9 || c === 0x00ab || c === 0x00ac || c === 0x00ae || c === 0x00b0 || c === 0x00b1 || c === 0x00b6 || c === 0x00bb || c === 0x00bf || c === 0x00d7 || c === 0x00f7 || c >= 0x2010 && c <= 0x2015 || c >= 0x2016 && c <= 0x2017 || c === 0x2018 || c === 0x2019 || c === 0x201a || c >= 0x201b && c <= 0x201c || c === 0x201d || c === 0x201e || c === 0x201f || c >= 0x2020 && c <= 0x2027 || c >= 0x2030 && c <= 0x2038 || c === 0x2039 || c === 0x203a || c >= 0x203b && c <= 0x203e || c >= 0x2041 && c <= 0x2043 || c === 0x2044 || c === 0x2045 || c === 0x2046 || c >= 0x2047 && c <= 0x2051 || c === 0x2052 || c === 0x2053 || c >= 0x2055 && c <= 0x205e || c >= 0x2190 && c <= 0x2194 || c >= 0x2195 && c <= 0x2199 || c >= 0x219a && c <= 0x219b || c >= 0x219c && c <= 0x219f || c === 0x21a0 || c >= 0x21a1 && c <= 0x21a2 || c === 0x21a3 || c >= 0x21a4 && c <= 0x21a5 || c === 0x21a6 || c >= 0x21a7 && c <= 0x21ad || c === 0x21ae || c >= 0x21af && c <= 0x21cd || c >= 0x21ce && c <= 0x21cf || c >= 0x21d0 && c <= 0x21d1 || c === 0x21d2 || c === 0x21d3 || c === 0x21d4 || c >= 0x21d5 && c <= 0x21f3 || c >= 0x21f4 && c <= 0x22ff || c >= 0x2300 && c <= 0x2307 || c === 0x2308 || c === 0x2309 || c === 0x230a || c === 0x230b || c >= 0x230c && c <= 0x231f || c >= 0x2320 && c <= 0x2321 || c >= 0x2322 && c <= 0x2328 || c === 0x2329 || c === 0x232a || c >= 0x232b && c <= 0x237b || c === 0x237c || c >= 0x237d && c <= 0x239a || c >= 0x239b && c <= 0x23b3 || c >= 0x23b4 && c <= 0x23db || c >= 0x23dc && c <= 0x23e1 || c >= 0x23e2 && c <= 0x2426 || c >= 0x2427 && c <= 0x243f || c >= 0x2440 && c <= 0x244a || c >= 0x244b && c <= 0x245f || c >= 0x2500 && c <= 0x25b6 || c === 0x25b7 || c >= 0x25b8 && c <= 0x25c0 || c === 0x25c1 || c >= 0x25c2 && c <= 0x25f7 || c >= 0x25f8 && c <= 0x25ff || c >= 0x2600 && c <= 0x266e || c === 0x266f || c >= 0x2670 && c <= 0x2767 || c === 0x2768 || c === 0x2769 || c === 0x276a || c === 0x276b || c === 0x276c || c === 0x276d || c === 0x276e || c === 0x276f || c === 0x2770 || c === 0x2771 || c === 0x2772 || c === 0x2773 || c === 0x2774 || c === 0x2775 || c >= 0x2794 && c <= 0x27bf || c >= 0x27c0 && c <= 0x27c4 || c === 0x27c5 || c === 0x27c6 || c >= 0x27c7 && c <= 0x27e5 || c === 0x27e6 || c === 0x27e7 || c === 0x27e8 || c === 0x27e9 || c === 0x27ea || c === 0x27eb || c === 0x27ec || c === 0x27ed || c === 0x27ee || c === 0x27ef || c >= 0x27f0 && c <= 0x27ff || c >= 0x2800 && c <= 0x28ff || c >= 0x2900 && c <= 0x2982 || c === 0x2983 || c === 0x2984 || c === 0x2985 || c === 0x2986 || c === 0x2987 || c === 0x2988 || c === 0x2989 || c === 0x298a || c === 0x298b || c === 0x298c || c === 0x298d || c === 0x298e || c === 0x298f || c === 0x2990 || c === 0x2991 || c === 0x2992 || c === 0x2993 || c === 0x2994 || c === 0x2995 || c === 0x2996 || c === 0x2997 || c === 0x2998 || c >= 0x2999 && c <= 0x29d7 || c === 0x29d8 || c === 0x29d9 || c === 0x29da || c === 0x29db || c >= 0x29dc && c <= 0x29fb || c === 0x29fc || c === 0x29fd || c >= 0x29fe && c <= 0x2aff || c >= 0x2b00 && c <= 0x2b2f || c >= 0x2b30 && c <= 0x2b44 || c >= 0x2b45 && c <= 0x2b46 || c >= 0x2b47 && c <= 0x2b4c || c >= 0x2b4d && c <= 0x2b73 || c >= 0x2b74 && c <= 0x2b75 || c >= 0x2b76 && c <= 0x2b95 || c === 0x2b96 || c >= 0x2b97 && c <= 0x2bff || c >= 0x2e00 && c <= 0x2e01 || c === 0x2e02 || c === 0x2e03 || c === 0x2e04 || c === 0x2e05 || c >= 0x2e06 && c <= 0x2e08 || c === 0x2e09 || c === 0x2e0a || c === 0x2e0b || c === 0x2e0c || c === 0x2e0d || c >= 0x2e0e && c <= 0x2e16 || c === 0x2e17 || c >= 0x2e18 && c <= 0x2e19 || c === 0x2e1a || c === 0x2e1b || c === 0x2e1c || c === 0x2e1d || c >= 0x2e1e && c <= 0x2e1f || c === 0x2e20 || c === 0x2e21 || c === 0x2e22 || c === 0x2e23 || c === 0x2e24 || c === 0x2e25 || c === 0x2e26 || c === 0x2e27 || c === 0x2e28 || c === 0x2e29 || c >= 0x2e2a && c <= 0x2e2e || c === 0x2e2f || c >= 0x2e30 && c <= 0x2e39 || c >= 0x2e3a && c <= 0x2e3b || c >= 0x2e3c && c <= 0x2e3f || c === 0x2e40 || c === 0x2e41 || c === 0x2e42 || c >= 0x2e43 && c <= 0x2e4f || c >= 0x2e50 && c <= 0x2e51 || c === 0x2e52 || c >= 0x2e53 && c <= 0x2e7f || c >= 0x3001 && c <= 0x3003 || c === 0x3008 || c === 0x3009 || c === 0x300a || c === 0x300b || c === 0x300c || c === 0x300d || c === 0x300e || c === 0x300f || c === 0x3010 || c === 0x3011 || c >= 0x3012 && c <= 0x3013 || c === 0x3014 || c === 0x3015 || c === 0x3016 || c === 0x3017 || c === 0x3018 || c === 0x3019 || c === 0x301a || c === 0x301b || c === 0x301c || c === 0x301d || c >= 0x301e && c <= 0x301f || c === 0x3020 || c === 0x3030 || c === 0xfd3e || c === 0xfd3f || c >= 0xfe45 && c <= 0xfe46;\n}","import { __assign } from \"tslib\";\nimport { ErrorKind } from './error';\nimport { Parser } from './parser';\nimport { isDateElement, isDateTimeSkeleton, isNumberElement, isNumberSkeleton, isPluralElement, isSelectElement, isTagElement, isTimeElement } from './types';\n\nfunction pruneLocation(els) {\n  els.forEach(function (el) {\n    delete el.location;\n\n    if (isSelectElement(el) || isPluralElement(el)) {\n      for (var k in el.options) {\n        delete el.options[k].location;\n        pruneLocation(el.options[k].value);\n      }\n    } else if (isNumberElement(el) && isNumberSkeleton(el.style)) {\n      delete el.style.location;\n    } else if ((isDateElement(el) || isTimeElement(el)) && isDateTimeSkeleton(el.style)) {\n      delete el.style.location;\n    } else if (isTagElement(el)) {\n      pruneLocation(el.children);\n    }\n  });\n}\n\nexport function parse(message, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  opts = __assign({\n    shouldParseSkeletons: true,\n    requiresOtherClause: true\n  }, opts);\n  var result = new Parser(message, opts).parse();\n\n  if (result.err) {\n    var error = SyntaxError(ErrorKind[result.err.kind]); // @ts-expect-error Assign to error object\n\n    error.location = result.err.location; // @ts-expect-error Assign to error object\n\n    error.originalMessage = result.err.message;\n    throw error;\n  }\n\n  if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {\n    pruneLocation(result.val);\n  }\n\n  return result.val;\n}\nexport * from './types';","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateENXB = exports.generateENXA = exports.generateXXHA = exports.generateXXAC = exports.generateXXLS = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar icu_messageformat_parser_1 = require(\"@formatjs/icu-messageformat-parser\");\n\nfunction generateXXLS(msg) {\n  var ast = typeof msg === 'string' ? icu_messageformat_parser_1.parse(msg) : msg;\n  var lastChunk = ast.pop();\n\n  if (lastChunk && icu_messageformat_parser_1.isLiteralElement(lastChunk)) {\n    lastChunk.value += 'SSSSSSSSSSSSSSSSSSSSSSSSS';\n    return tslib_1.__spreadArray(tslib_1.__spreadArray([], ast), [lastChunk]);\n  }\n\n  return tslib_1.__spreadArray(tslib_1.__spreadArray([], ast), [{\n    type: icu_messageformat_parser_1.TYPE.literal,\n    value: 'SSSSSSSSSSSSSSSSSSSSSSSSS'\n  }]);\n}\n\nexports.generateXXLS = generateXXLS;\n\nfunction generateXXAC(msg) {\n  var ast = typeof msg === 'string' ? icu_messageformat_parser_1.parse(msg) : msg;\n  ast.forEach(function (el) {\n    if (icu_messageformat_parser_1.isLiteralElement(el)) {\n      el.value = el.value.toUpperCase();\n    } else if (icu_messageformat_parser_1.isPluralElement(el) || icu_messageformat_parser_1.isSelectElement(el)) {\n      for (var _i = 0, _a = Object.values(el.options); _i < _a.length; _i++) {\n        var opt = _a[_i];\n        generateXXAC(opt.value);\n      }\n    } else if (icu_messageformat_parser_1.isTagElement(el)) {\n      generateXXAC(el.children);\n    }\n  });\n  return ast;\n}\n\nexports.generateXXAC = generateXXAC;\n\nfunction generateXXHA(msg) {\n  var ast = typeof msg === 'string' ? icu_messageformat_parser_1.parse(msg) : msg;\n  var firstChunk = ast.shift();\n\n  if (firstChunk && icu_messageformat_parser_1.isLiteralElement(firstChunk)) {\n    firstChunk.value = '[javascript]' + firstChunk.value;\n    return tslib_1.__spreadArray([firstChunk], ast);\n  }\n\n  return tslib_1.__spreadArray([{\n    type: icu_messageformat_parser_1.TYPE.literal,\n    value: '[javascript]'\n  }], ast);\n}\n\nexports.generateXXHA = generateXXHA;\nvar ASCII = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\nvar ACCENTED_ASCII = 'âḃćḋèḟĝḫíĵǩĺṁńŏṗɋŕśṭůṿẘẋẏẓḀḂḈḊḔḞḠḢḬĴḴĻḾŊÕṔɊŔṠṮŨṼẄẌŸƵ';\n\nfunction generateENXA(msg) {\n  var ast = typeof msg === 'string' ? icu_messageformat_parser_1.parse(msg) : msg;\n  ast.forEach(function (el) {\n    if (icu_messageformat_parser_1.isLiteralElement(el)) {\n      el.value = el.value.split('').map(function (c) {\n        var i = ASCII.indexOf(c);\n\n        if (i < 0) {\n          return c;\n        }\n\n        return ACCENTED_ASCII[i];\n      }).join('');\n    } else if (icu_messageformat_parser_1.isPluralElement(el) || icu_messageformat_parser_1.isSelectElement(el)) {\n      for (var _i = 0, _a = Object.values(el.options); _i < _a.length; _i++) {\n        var opt = _a[_i];\n        generateENXA(opt.value);\n      }\n    } else if (icu_messageformat_parser_1.isTagElement(el)) {\n      generateENXA(el.children);\n    }\n  });\n  return ast;\n}\n\nexports.generateENXA = generateENXA;\n\nfunction generateENXB(msg) {\n  var ast = typeof msg === 'string' ? icu_messageformat_parser_1.parse(msg) : msg;\n  ast.forEach(function (el) {\n    if (icu_messageformat_parser_1.isLiteralElement(el)) {\n      var pseudoString = el.value.split('').map(function (c, index) {\n        var i = ASCII.indexOf(c);\n        var canPad = (index + 1) % 3 === 0;\n\n        if (i < 0) {\n          return c;\n        }\n\n        return canPad ? ACCENTED_ASCII[i].repeat(3) : ACCENTED_ASCII[i];\n      }).join('');\n      el.value = \"[!! \" + pseudoString + \" !!]\";\n    } else if (icu_messageformat_parser_1.isPluralElement(el) || icu_messageformat_parser_1.isSelectElement(el)) {\n      for (var _i = 0, _a = Object.values(el.options); _i < _a.length; _i++) {\n        var opt = _a[_i];\n        generateENXB(opt.value);\n      }\n    } else if (icu_messageformat_parser_1.isTagElement(el)) {\n      generateENXB(el.children);\n    }\n  });\n  return ast;\n}\n\nexports.generateENXB = generateENXB;"],"sourceRoot":""}